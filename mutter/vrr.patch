From 80fbd6945ee70f82cc9a18ddc76267fb3157fb6a Mon Sep 17 00:00:00 2001
From: Dor Askayo <dor.askayo@gmail.com>
Date: Sun, 8 May 2022 00:09:44 +0300
Subject: [PATCH 01/27] meson: Add -Werror=strict-aliasing

This warning can point out design issues, so it should be useful to
have it treated as error.
---
 meson.build | 1 +
 1 file changed, 1 insertion(+)

diff --git a/meson.build b/meson.build
index 78f94b112..fa0cc23f0 100644
--- a/meson.build
+++ b/meson.build
@@ -427,6 +427,7 @@ if buildtype != 'plain'
     '-Werror=pointer-to-int-cast',
     '-Werror=empty-body',
     '-Werror=write-strings',
+    '-Werror=strict-aliasing',
     '-Wno-sign-compare',
     '-Wno-cast-function-type',
     '-Wno-unused-parameter',
-- 
2.37.1


From 5ae23397946a7adb710cff6f9653fea01eee1bd7 Mon Sep 17 00:00:00 2001
From: Dor Askayo <dor.askayo@gmail.com>
Date: Sun, 26 Jun 2022 11:19:18 +0300
Subject: [PATCH 04/27] clutter/frame-clock: Ignore missing presentation
 timestamps

In some hardware configurations, presentation timestamps could be
missing from some page flip events, leading to a temporary loss of
vblank synchronization.

This occurs at least with AMD GPUs for atomic commits that only update
the cursor plane. [0]

In those cases, it's better to calculate the next update time
according to the last valid presentation timestamp instead of relying
on the dispatch lateness.

[0] https://gitlab.freedesktop.org/drm/amd/-/issues/2030
---
 clutter/clutter/clutter-frame-clock.c | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/clutter/clutter/clutter-frame-clock.c b/clutter/clutter/clutter-frame-clock.c
index 6fa2b2588..5563f99dd 100644
--- a/clutter/clutter/clutter-frame-clock.c
+++ b/clutter/clutter/clutter-frame-clock.c
@@ -270,7 +270,8 @@ clutter_frame_clock_notify_presented (ClutterFrameClock *frame_clock,
     }
 #endif
 
-  frame_clock->last_presentation_time_us = frame_info->presentation_time;
+  if (frame_info->presentation_time > 0)
+    frame_clock->last_presentation_time_us = frame_info->presentation_time;
 
   frame_clock->got_measurements_last_frame = FALSE;
 
@@ -881,6 +882,7 @@ static void
 clutter_frame_clock_init (ClutterFrameClock *frame_clock)
 {
   frame_clock->state = CLUTTER_FRAME_CLOCK_STATE_INIT;
+  frame_clock->last_presentation_time_us = 0;
 }
 
 static void
-- 
2.37.1


From 586af11f3f69ca05715b93cb6dc31d5b73ccb4cb Mon Sep 17 00:00:00 2001
From: Dor Askayo <dor.askayo@gmail.com>
Date: Sun, 16 Aug 2020 17:14:03 +0300
Subject: [PATCH 05/27] surface-actor: Add "frozen" signal

This signal is emitted when the surface actor is frozen and will not
update until it is thawed.
---
 src/compositor/meta-surface-actor.c | 11 +++++++++++
 1 file changed, 11 insertions(+)

diff --git a/src/compositor/meta-surface-actor.c b/src/compositor/meta-surface-actor.c
index c2bf6696a..978ccf9e6 100644
--- a/src/compositor/meta-surface-actor.c
+++ b/src/compositor/meta-surface-actor.c
@@ -51,6 +51,7 @@ enum
 {
   REPAINT_SCHEDULED,
   SIZE_CHANGED,
+  FROZEN,
 
   LAST_SIGNAL,
 };
@@ -269,6 +270,13 @@ meta_surface_actor_class_init (MetaSurfaceActorClass *klass)
                                         0,
                                         NULL, NULL, NULL,
                                         G_TYPE_NONE, 0);
+
+  signals[FROZEN] = g_signal_new ("frozen",
+                                  G_TYPE_FROM_CLASS (object_class),
+                                  G_SIGNAL_RUN_LAST,
+                                  0,
+                                  NULL, NULL, NULL,
+                                  G_TYPE_NONE, 0);
 }
 
 gboolean
@@ -594,6 +602,9 @@ meta_surface_actor_set_frozen (MetaSurfaceActor *self,
 
   priv->frozen = frozen;
 
+  if (frozen)
+    g_signal_emit (self, signals[FROZEN], 0);
+
   if (!frozen && priv->pending_damage)
     {
       int i, n_rects = cairo_region_num_rectangles (priv->pending_damage);
-- 
2.37.1


From 182813576a336901b34467994887bf343999c92f Mon Sep 17 00:00:00 2001
From: Dor Askayo <dor.askayo@gmail.com>
Date: Sun, 16 Aug 2020 19:50:45 +0300
Subject: [PATCH 06/27] clutter/stage: Allow scheduling stage updates in the
 context of an actor

This is implemented using a new ClutterStageView virtual function so
each child class can implement unique functionality around it. When not
implemented by a child class, the virtual function keeps the existing
behavior of a stage view update.

In later commits, the virtual function would be implemented by the
native backend to synchronize the frame clock to the update rate of
specific actors.
---
 clutter/clutter/clutter-stage-view-private.h |  4 +++
 clutter/clutter/clutter-stage-view.c         | 18 ++++++++++++
 clutter/clutter/clutter-stage-view.h         |  3 ++
 clutter/clutter/clutter-stage.c              | 30 ++++++++++++++++++++
 clutter/clutter/clutter-stage.h              |  4 +++
 5 files changed, 59 insertions(+)

diff --git a/clutter/clutter/clutter-stage-view-private.h b/clutter/clutter/clutter-stage-view-private.h
index 39d8601ea..5c1ce9645 100644
--- a/clutter/clutter/clutter-stage-view-private.h
+++ b/clutter/clutter/clutter-stage-view-private.h
@@ -72,6 +72,10 @@ void clutter_stage_view_transform_rect_to_onscreen (ClutterStageView
 CLUTTER_EXPORT
 void clutter_stage_view_schedule_update (ClutterStageView *view);
 
+CLUTTER_EXPORT
+void clutter_stage_view_schedule_actor_update (ClutterStageView *view,
+                                               ClutterActor     *actor);
+
 CLUTTER_EXPORT
 void clutter_stage_view_notify_presented (ClutterStageView *view,
                                           ClutterFrameInfo *frame_info);
diff --git a/clutter/clutter/clutter-stage-view.c b/clutter/clutter/clutter-stage-view.c
index 2e47237f0..55d4368bc 100644
--- a/clutter/clutter/clutter-stage-view.c
+++ b/clutter/clutter/clutter-stage-view.c
@@ -1047,6 +1047,22 @@ clutter_stage_view_schedule_update (ClutterStageView *view)
   clutter_frame_clock_schedule_update (priv->frame_clock);
 }
 
+void
+clutter_stage_view_schedule_actor_update (ClutterStageView *view,
+                                          ClutterActor     *actor)
+{
+  ClutterStageViewClass *view_class = CLUTTER_STAGE_VIEW_GET_CLASS (view);
+
+  view_class->schedule_actor_update (view, actor);
+}
+
+static void
+clutter_stage_view_real_schedule_actor_update (ClutterStageView *view,
+                                               ClutterActor     *actor)
+{
+  clutter_stage_view_schedule_update (view);
+}
+
 float
 clutter_stage_view_get_refresh_rate (ClutterStageView *view)
 {
@@ -1443,6 +1459,8 @@ clutter_stage_view_class_init (ClutterStageViewClass *klass)
   object_class->dispose = clutter_stage_view_dispose;
   object_class->finalize = clutter_stage_view_finalize;
 
+  klass->schedule_actor_update = clutter_stage_view_real_schedule_actor_update;
+
   obj_props[PROP_NAME] =
     g_param_spec_string ("name",
                          "Name",
diff --git a/clutter/clutter/clutter-stage-view.h b/clutter/clutter/clutter-stage-view.h
index c2cf76abf..0f34cf5b8 100644
--- a/clutter/clutter/clutter-stage-view.h
+++ b/clutter/clutter/clutter-stage-view.h
@@ -50,6 +50,9 @@ struct _ClutterStageViewClass
                                        int                          dst_width,
                                        int                          dst_height,
                                        cairo_rectangle_int_t       *dst_rect);
+
+  void (* schedule_actor_update) (ClutterStageView *view,
+                                  ClutterActor     *actor);
 };
 
 CLUTTER_EXPORT
diff --git a/clutter/clutter/clutter-stage.c b/clutter/clutter/clutter-stage.c
index e97cd54a3..3e81655e0 100644
--- a/clutter/clutter/clutter-stage.c
+++ b/clutter/clutter/clutter-stage.c
@@ -2467,6 +2467,36 @@ clutter_stage_schedule_update (ClutterStage *stage)
     }
 }
 
+/**
+ * clutter_stage_schedule_actor_update:
+ * @stage: a #ClutterStage actor
+ * @actor: a #ClutterActor which requires an update
+ *
+ * Schedules a redraw of the #ClutterStage at the next optimal timestamp
+ * for the specified actor.
+ */
+void
+clutter_stage_schedule_actor_update (ClutterStage *stage,
+                                     ClutterActor *actor)
+{
+  ClutterStageWindow *stage_window;
+  GList *l;
+
+  if (CLUTTER_ACTOR_IN_DESTRUCTION (stage))
+    return;
+
+  stage_window = _clutter_stage_get_window (stage);
+  if (stage_window == NULL)
+    return;
+
+  for (l = clutter_stage_peek_stage_views (stage); l; l = l->next)
+    {
+      ClutterStageView *view = l->data;
+
+      clutter_stage_view_schedule_actor_update (view, actor);
+    }
+}
+
 ClutterPaintVolume *
 _clutter_stage_paint_volume_stack_allocate (ClutterStage *stage)
 {
diff --git a/clutter/clutter/clutter-stage.h b/clutter/clutter/clutter-stage.h
index 5412c4d72..a579820a4 100644
--- a/clutter/clutter/clutter-stage.h
+++ b/clutter/clutter/clutter-stage.h
@@ -210,6 +210,10 @@ gboolean        clutter_stage_is_redraw_queued_on_view          (ClutterStage
 CLUTTER_EXPORT
 void clutter_stage_schedule_update (ClutterStage *stage);
 
+CLUTTER_EXPORT
+void clutter_stage_schedule_actor_update (ClutterStage *stage,
+                                          ClutterActor *actor);
+
 CLUTTER_EXPORT
 gboolean clutter_stage_get_capture_final_size (ClutterStage          *stage,
                                                cairo_rectangle_int_t *rect,
-- 
2.37.1


From 09c6d3f0d4c573aa526fcdbdf30b39db92e91097 Mon Sep 17 00:00:00 2001
From: Dor Askayo <dor.askayo@gmail.com>
Date: Sat, 13 Mar 2021 12:55:09 +0200
Subject: [PATCH 07/27] clutter/frame-clock: Simplify early presented event
 handling

A few calculations and assignments are done unnecessarily when the
last next presentation time is invalid. This increases the cognitive
complexity of the function for no reason.

No change in behavior.
---
 clutter/clutter/clutter-frame-clock.c | 46 +++++++++++++--------------
 1 file changed, 23 insertions(+), 23 deletions(-)

diff --git a/clutter/clutter/clutter-frame-clock.c b/clutter/clutter/clutter-frame-clock.c
index 5563f99dd..4d2cc51bb 100644
--- a/clutter/clutter/clutter-frame-clock.c
+++ b/clutter/clutter/clutter-frame-clock.c
@@ -407,8 +407,6 @@ calculate_next_update_time_us (ClutterFrameClock *frame_clock,
   int64_t refresh_interval_us;
   int64_t min_render_time_allowed_us;
   int64_t max_render_time_allowed_us;
-  int64_t last_next_presentation_time_us;
-  int64_t time_since_last_next_presentation_time_us;
   int64_t next_presentation_time_us;
   int64_t next_update_time_us;
 
@@ -510,28 +508,30 @@ calculate_next_update_time_us (ClutterFrameClock *frame_clock,
         refresh_interval_us;
     }
 
-  /*
-   * Skip one interval if we got an early presented event.
-   *
-   *        last frame this was last_presentation_time
-   *       /       frame_clock->next_presentation_time_us
-   *      /       /
-   * |---|-o-----|-x----->
-   *       |       \
-   *       \        next_presentation_time_us is thus right after the last one
-   *        but got an unexpected early presentation
-   *             \_/
-   *             time_since_last_next_presentation_time_us
-   *
-   */
-  last_next_presentation_time_us = frame_clock->next_presentation_time_us;
-  time_since_last_next_presentation_time_us =
-    next_presentation_time_us - last_next_presentation_time_us;
-  if (frame_clock->is_next_presentation_time_valid &&
-      time_since_last_next_presentation_time_us < (refresh_interval_us / 2))
+  if (frame_clock->is_next_presentation_time_valid)
     {
-      next_presentation_time_us =
-        frame_clock->next_presentation_time_us + refresh_interval_us;
+      int64_t time_since_last_next_presentation_time_us =
+        next_presentation_time_us - frame_clock->next_presentation_time_us;
+
+      /*
+       * Skip one interval if we got an early presented event.
+       *
+       *        last frame this was last_presentation_time
+       *       /       frame_clock->next_presentation_time_us
+       *      /       /
+       * |---|-o-----|-x----->
+       *       |       \
+       *       \        next_presentation_time_us is thus right after the last one
+       *        but got an unexpected early presentation
+       *             \_/
+       *             time_since_last_next_presentation_time_us
+       *
+       */
+      if (time_since_last_next_presentation_time_us < (refresh_interval_us / 2))
+        {
+          next_presentation_time_us =
+            frame_clock->next_presentation_time_us + refresh_interval_us;
+        }
     }
 
   while (next_presentation_time_us < now_us + min_render_time_allowed_us)
-- 
2.37.1


From e2f03a9f619529c095cd6c9adff3f0844e23aee7 Mon Sep 17 00:00:00 2001
From: Dor Askayo <dor.askayo@gmail.com>
Date: Tue, 4 Aug 2020 00:28:12 +0300
Subject: [PATCH 08/27] clutter/frame-clock: Add a mode for variable scheduling

A new variable mode is introduced which allows:
  * Immediate update scheduling, even when an update is already
    scheduled.
  * A timeout-based frame scheduling for every other update.

This mode will be used by following commits to implement
synchronization of page flips to actor frames.
---
 clutter/clutter/clutter-frame-clock.c | 135 ++++++++++++++++++++------
 clutter/clutter/clutter-frame-clock.h |  10 ++
 2 files changed, 118 insertions(+), 27 deletions(-)

diff --git a/clutter/clutter/clutter-frame-clock.c b/clutter/clutter/clutter-frame-clock.c
index 4d2cc51bb..1bc8316b1 100644
--- a/clutter/clutter/clutter-frame-clock.c
+++ b/clutter/clutter/clutter-frame-clock.c
@@ -47,6 +47,9 @@ typedef struct _EstimateQueue
 
 #define SYNC_DELAY_FALLBACK_FRACTION 0.875
 
+#define PRESENTATION_TIME_INVALID -1
+#define MINIMUM_REFRESH_RATE 30
+
 typedef struct _ClutterFrameListener
 {
   const ClutterFrameListenerIface *iface;
@@ -62,8 +65,8 @@ typedef struct _ClutterClockSource
 
 typedef enum _ClutterFrameClockState
 {
-  CLUTTER_FRAME_CLOCK_STATE_INIT,
   CLUTTER_FRAME_CLOCK_STATE_IDLE,
+  CLUTTER_FRAME_CLOCK_STATE_IDLE_TIMEOUT,
   CLUTTER_FRAME_CLOCK_STATE_SCHEDULED,
   CLUTTER_FRAME_CLOCK_STATE_DISPATCHING,
   CLUTTER_FRAME_CLOCK_STATE_PENDING_PRESENTED,
@@ -75,6 +78,8 @@ struct _ClutterFrameClock
 
   float refresh_rate;
   int64_t refresh_interval_us;
+  int64_t minimum_refresh_interval_us;
+
   ClutterFrameListener listener;
 
   GSource *source;
@@ -82,11 +87,12 @@ struct _ClutterFrameClock
   int64_t frame_count;
 
   ClutterFrameClockState state;
+  ClutterFrameClockMode mode;
+
   int64_t last_dispatch_time_us;
   int64_t last_dispatch_lateness_us;
-  int64_t last_presentation_time_us;
 
-  gboolean is_next_presentation_time_valid;
+  int64_t last_presentation_time_us;
   int64_t next_presentation_time_us;
 
   /* Buffer must be submitted to KMS and GPU rendering must be finished
@@ -313,8 +319,8 @@ clutter_frame_clock_notify_presented (ClutterFrameClock *frame_clock,
 
   switch (frame_clock->state)
     {
-    case CLUTTER_FRAME_CLOCK_STATE_INIT:
     case CLUTTER_FRAME_CLOCK_STATE_IDLE:
+    case CLUTTER_FRAME_CLOCK_STATE_IDLE_TIMEOUT:
     case CLUTTER_FRAME_CLOCK_STATE_SCHEDULED:
       g_warn_if_reached ();
       break;
@@ -333,8 +339,8 @@ clutter_frame_clock_notify_ready (ClutterFrameClock *frame_clock)
 
   switch (frame_clock->state)
     {
-    case CLUTTER_FRAME_CLOCK_STATE_INIT:
     case CLUTTER_FRAME_CLOCK_STATE_IDLE:
+    case CLUTTER_FRAME_CLOCK_STATE_IDLE_TIMEOUT:
     case CLUTTER_FRAME_CLOCK_STATE_SCHEDULED:
       g_warn_if_reached ();
       break;
@@ -399,12 +405,12 @@ clutter_frame_clock_compute_max_render_time_us (ClutterFrameClock *frame_clock)
 
 static void
 calculate_next_update_time_us (ClutterFrameClock *frame_clock,
+                               int64_t            refresh_interval_us,
                                int64_t           *out_next_update_time_us,
                                int64_t           *out_next_presentation_time_us)
 {
   int64_t last_presentation_time_us;
   int64_t now_us;
-  int64_t refresh_interval_us;
   int64_t min_render_time_allowed_us;
   int64_t max_render_time_allowed_us;
   int64_t next_presentation_time_us;
@@ -412,9 +418,9 @@ calculate_next_update_time_us (ClutterFrameClock *frame_clock,
 
   now_us = g_get_monotonic_time ();
 
-  refresh_interval_us = frame_clock->refresh_interval_us;
+  last_presentation_time_us = frame_clock->last_presentation_time_us;
 
-  if (frame_clock->last_presentation_time_us == 0)
+  if (last_presentation_time_us == PRESENTATION_TIME_INVALID)
     {
       *out_next_update_time_us =
         frame_clock->last_dispatch_time_us ?
@@ -422,7 +428,7 @@ calculate_next_update_time_us (ClutterFrameClock *frame_clock,
           frame_clock->last_dispatch_lateness_us) + refresh_interval_us) :
         now_us;
 
-      *out_next_presentation_time_us = 0;
+      *out_next_presentation_time_us = PRESENTATION_TIME_INVALID;
       return;
     }
 
@@ -450,7 +456,6 @@ calculate_next_update_time_us (ClutterFrameClock *frame_clock,
    * 0
    *
    */
-  last_presentation_time_us = frame_clock->last_presentation_time_us;
   next_presentation_time_us = last_presentation_time_us + refresh_interval_us;
 
   /*
@@ -508,7 +513,7 @@ calculate_next_update_time_us (ClutterFrameClock *frame_clock,
         refresh_interval_us;
     }
 
-  if (frame_clock->is_next_presentation_time_valid)
+  if (frame_clock->next_presentation_time_us != PRESENTATION_TIME_INVALID)
     {
       int64_t time_since_last_next_presentation_time_us =
         next_presentation_time_us - frame_clock->next_presentation_time_us;
@@ -543,6 +548,41 @@ calculate_next_update_time_us (ClutterFrameClock *frame_clock,
   *out_next_presentation_time_us = next_presentation_time_us;
 }
 
+static void
+calculate_next_idle_timeout_us (ClutterFrameClock *frame_clock,
+                                int64_t           *out_next_update_time_us,
+                                int64_t           *out_next_presentation_time_us)
+{
+  int64_t now_us;
+  int64_t last_presentation_time_us;
+  int64_t next_presentation_time_us;
+  int64_t timeout_interval_us;
+
+  now_us = g_get_monotonic_time ();
+
+  last_presentation_time_us = frame_clock->last_presentation_time_us;
+
+  timeout_interval_us = frame_clock->minimum_refresh_interval_us;
+
+  if (last_presentation_time_us == PRESENTATION_TIME_INVALID)
+    {
+      *out_next_update_time_us =
+        frame_clock->last_dispatch_time_us ?
+        ((frame_clock->last_dispatch_time_us -
+          frame_clock->last_dispatch_lateness_us) + timeout_interval_us) :
+        now_us;
+      return;
+    }
+
+  next_presentation_time_us = last_presentation_time_us + timeout_interval_us;
+
+  while (next_presentation_time_us < now_us)
+    next_presentation_time_us += timeout_interval_us;
+
+  *out_next_update_time_us = next_presentation_time_us;
+  *out_next_presentation_time_us = next_presentation_time_us;
+}
+
 void
 clutter_frame_clock_inhibit (ClutterFrameClock *frame_clock)
 {
@@ -552,9 +592,9 @@ clutter_frame_clock_inhibit (ClutterFrameClock *frame_clock)
     {
       switch (frame_clock->state)
         {
-        case CLUTTER_FRAME_CLOCK_STATE_INIT:
         case CLUTTER_FRAME_CLOCK_STATE_IDLE:
           break;
+        case CLUTTER_FRAME_CLOCK_STATE_IDLE_TIMEOUT:
         case CLUTTER_FRAME_CLOCK_STATE_SCHEDULED:
           frame_clock->pending_reschedule = TRUE;
           frame_clock->state = CLUTTER_FRAME_CLOCK_STATE_IDLE;
@@ -593,8 +633,8 @@ clutter_frame_clock_schedule_update_now (ClutterFrameClock *frame_clock)
 
   switch (frame_clock->state)
     {
-    case CLUTTER_FRAME_CLOCK_STATE_INIT:
     case CLUTTER_FRAME_CLOCK_STATE_IDLE:
+    case CLUTTER_FRAME_CLOCK_STATE_IDLE_TIMEOUT:
       next_update_time_us = g_get_monotonic_time ();
       break;
     case CLUTTER_FRAME_CLOCK_STATE_SCHEDULED:
@@ -609,8 +649,8 @@ clutter_frame_clock_schedule_update_now (ClutterFrameClock *frame_clock)
   g_warn_if_fail (next_update_time_us != -1);
 
   g_source_set_ready_time (frame_clock->source, next_update_time_us);
+  frame_clock->next_presentation_time_us = PRESENTATION_TIME_INVALID;
   frame_clock->state = CLUTTER_FRAME_CLOCK_STATE_SCHEDULED;
-  frame_clock->is_next_presentation_time_valid = FALSE;
 }
 
 void
@@ -626,16 +666,9 @@ clutter_frame_clock_schedule_update (ClutterFrameClock *frame_clock)
 
   switch (frame_clock->state)
     {
-    case CLUTTER_FRAME_CLOCK_STATE_INIT:
-      next_update_time_us = g_get_monotonic_time ();
-      break;
     case CLUTTER_FRAME_CLOCK_STATE_IDLE:
-      calculate_next_update_time_us (frame_clock,
-                                     &next_update_time_us,
-                                     &frame_clock->next_presentation_time_us);
-      frame_clock->is_next_presentation_time_valid =
-        (frame_clock->next_presentation_time_us != 0);
       break;
+    case CLUTTER_FRAME_CLOCK_STATE_IDLE_TIMEOUT:
     case CLUTTER_FRAME_CLOCK_STATE_SCHEDULED:
       return;
     case CLUTTER_FRAME_CLOCK_STATE_DISPATCHING:
@@ -644,10 +677,52 @@ clutter_frame_clock_schedule_update (ClutterFrameClock *frame_clock)
       return;
     }
 
+  switch (frame_clock->mode)
+    {
+    case CLUTTER_FRAME_CLOCK_MODE_FIXED:
+      calculate_next_update_time_us (frame_clock,
+                                     frame_clock->refresh_interval_us,
+                                     &next_update_time_us,
+                                     &frame_clock->next_presentation_time_us);
+      frame_clock->state = CLUTTER_FRAME_CLOCK_STATE_SCHEDULED;
+      break;
+    case CLUTTER_FRAME_CLOCK_MODE_VARIABLE:
+      calculate_next_idle_timeout_us (frame_clock,
+                                      &next_update_time_us,
+                                      &frame_clock->next_presentation_time_us);
+      frame_clock->state = CLUTTER_FRAME_CLOCK_STATE_IDLE_TIMEOUT;
+      break;
+    }
+
   g_warn_if_fail (next_update_time_us != -1);
 
   g_source_set_ready_time (frame_clock->source, next_update_time_us);
-  frame_clock->state = CLUTTER_FRAME_CLOCK_STATE_SCHEDULED;
+}
+
+void
+clutter_frame_clock_set_mode (ClutterFrameClock     *frame_clock,
+                              ClutterFrameClockMode  mode)
+{
+  if (frame_clock->mode == mode)
+    return;
+
+  frame_clock->mode = mode;
+
+  switch (frame_clock->state)
+    {
+    case CLUTTER_FRAME_CLOCK_STATE_IDLE:
+      break;
+    case CLUTTER_FRAME_CLOCK_STATE_IDLE_TIMEOUT:
+    case CLUTTER_FRAME_CLOCK_STATE_SCHEDULED:
+      frame_clock->state = CLUTTER_FRAME_CLOCK_STATE_IDLE;
+      frame_clock->pending_reschedule = TRUE;
+      break;
+    case CLUTTER_FRAME_CLOCK_STATE_DISPATCHING:
+    case CLUTTER_FRAME_CLOCK_STATE_PENDING_PRESENTED:
+      break;
+    }
+
+  maybe_reschedule_update (frame_clock);
 }
 
 static void
@@ -693,7 +768,7 @@ clutter_frame_clock_dispatch (ClutterFrameClock *frame_clock,
   COGL_TRACE_END (ClutterFrameClockEvents);
 
   COGL_TRACE_BEGIN (ClutterFrameClockTimelines, "Frame Clock (timelines)");
-  if (frame_clock->is_next_presentation_time_valid)
+  if (frame_clock->next_presentation_time_us != PRESENTATION_TIME_INVALID)
     time_us = frame_clock->next_presentation_time_us;
   advance_timelines (frame_clock, time_us);
   COGL_TRACE_END (ClutterFrameClockTimelines);
@@ -706,11 +781,11 @@ clutter_frame_clock_dispatch (ClutterFrameClock *frame_clock,
 
   switch (frame_clock->state)
     {
-    case CLUTTER_FRAME_CLOCK_STATE_INIT:
     case CLUTTER_FRAME_CLOCK_STATE_PENDING_PRESENTED:
       g_warn_if_reached ();
       break;
     case CLUTTER_FRAME_CLOCK_STATE_IDLE:
+    case CLUTTER_FRAME_CLOCK_STATE_IDLE_TIMEOUT:
     case CLUTTER_FRAME_CLOCK_STATE_SCHEDULED:
       break;
     case CLUTTER_FRAME_CLOCK_STATE_DISPATCHING:
@@ -851,6 +926,10 @@ clutter_frame_clock_new (float                            refresh_rate,
   init_frame_clock_source (frame_clock);
 
   clutter_frame_clock_set_refresh_rate (frame_clock, refresh_rate);
+
+  frame_clock->minimum_refresh_interval_us =
+    (int64_t) (0.5 + G_USEC_PER_SEC / MINIMUM_REFRESH_RATE);
+
   frame_clock->vblank_duration_us = vblank_duration_us;
 
   return frame_clock;
@@ -881,8 +960,10 @@ clutter_frame_clock_dispose (GObject *object)
 static void
 clutter_frame_clock_init (ClutterFrameClock *frame_clock)
 {
-  frame_clock->state = CLUTTER_FRAME_CLOCK_STATE_INIT;
-  frame_clock->last_presentation_time_us = 0;
+  frame_clock->state = CLUTTER_FRAME_CLOCK_STATE_IDLE;
+  frame_clock->mode = CLUTTER_FRAME_CLOCK_MODE_FIXED;
+  frame_clock->last_presentation_time_us = PRESENTATION_TIME_INVALID;
+  frame_clock->next_presentation_time_us = PRESENTATION_TIME_INVALID;
 }
 
 static void
diff --git a/clutter/clutter/clutter-frame-clock.h b/clutter/clutter/clutter-frame-clock.h
index 91e6b3a13..380f56c6b 100644
--- a/clutter/clutter/clutter-frame-clock.h
+++ b/clutter/clutter/clutter-frame-clock.h
@@ -53,6 +53,12 @@ typedef struct _ClutterFrameListenerIface
                                 gpointer           user_data);
 } ClutterFrameListenerIface;
 
+typedef enum _ClutterFrameClockMode
+{
+  CLUTTER_FRAME_CLOCK_MODE_FIXED,
+  CLUTTER_FRAME_CLOCK_MODE_VARIABLE,
+} ClutterFrameClockMode;
+
 CLUTTER_EXPORT
 ClutterFrameClock * clutter_frame_clock_new (float                            refresh_rate,
                                              int64_t                          vblank_duration_us,
@@ -62,6 +68,10 @@ ClutterFrameClock * clutter_frame_clock_new (float                            re
 CLUTTER_EXPORT
 void clutter_frame_clock_destroy (ClutterFrameClock *frame_clock);
 
+CLUTTER_EXPORT
+void clutter_frame_clock_set_mode (ClutterFrameClock     *frame_clock,
+                                   ClutterFrameClockMode  mode);
+
 CLUTTER_EXPORT
 void clutter_frame_clock_notify_presented (ClutterFrameClock *frame_clock,
                                            ClutterFrameInfo  *frame_info);
-- 
2.37.1


From e122738b49a76f07ce08999dea0a2fbde417fb3b Mon Sep 17 00:00:00 2001
From: Dor Askayo <dor.askayo@gmail.com>
Date: Fri, 10 Jul 2020 18:40:07 +0300
Subject: [PATCH 09/27] backends/native: Introduce MetaRendererViewNative

MetaRendererViewNative is a MetaRendererView which contains logic
specific to views of the native backend. It will be used by following
commits.

In the future, per-view logic from MetaRendererNative can be moved to
MetaRendererViewNative where it makes more sense to have it.
---
 src/backends/meta-renderer-view.c             | 45 ++++++++++++-------
 src/backends/meta-renderer-view.h             | 11 +++--
 src/backends/native/meta-renderer-native.c    | 34 +++++++-------
 .../native/meta-renderer-view-native.c        | 43 ++++++++++++++++++
 .../native/meta-renderer-view-native.h        | 34 ++++++++++++++
 src/meson.build                               |  2 +
 6 files changed, 135 insertions(+), 34 deletions(-)
 create mode 100644 src/backends/native/meta-renderer-view-native.c
 create mode 100644 src/backends/native/meta-renderer-view-native.h

diff --git a/src/backends/meta-renderer-view.c b/src/backends/meta-renderer-view.c
index 55617fc68..c16ba351c 100644
--- a/src/backends/meta-renderer-view.c
+++ b/src/backends/meta-renderer-view.c
@@ -49,28 +49,32 @@ enum
 
 static GParamSpec *obj_props[PROP_LAST];
 
-struct _MetaRendererView
+typedef struct _MetaRendererViewPrivate
 {
-  MetaStageView parent;
-
   MetaMonitorTransform transform;
 
   MetaCrtc *crtc;
-};
+} MetaRendererViewPrivate;
 
-G_DEFINE_TYPE (MetaRendererView, meta_renderer_view,
-               META_TYPE_STAGE_VIEW)
+G_DEFINE_TYPE_WITH_PRIVATE (MetaRendererView, meta_renderer_view,
+                            META_TYPE_STAGE_VIEW)
 
 MetaMonitorTransform
 meta_renderer_view_get_transform (MetaRendererView *view)
 {
-  return view->transform;
+  MetaRendererViewPrivate *priv =
+    meta_renderer_view_get_instance_private (view);
+
+  return priv->transform;
 }
 
 MetaCrtc *
 meta_renderer_view_get_crtc (MetaRendererView *view)
 {
-  return view->crtc;
+  MetaRendererViewPrivate *priv =
+    meta_renderer_view_get_instance_private (view);
+
+  return priv->crtc;
 }
 
 static void
@@ -78,10 +82,12 @@ meta_renderer_view_get_offscreen_transformation_matrix (ClutterStageView  *view,
                                                         graphene_matrix_t *matrix)
 {
   MetaRendererView *renderer_view = META_RENDERER_VIEW (view);
+  MetaRendererViewPrivate *priv =
+    meta_renderer_view_get_instance_private (renderer_view);
 
   graphene_matrix_init_identity (matrix);
 
-  switch (renderer_view->transform)
+  switch (priv->transform)
     {
     case META_MONITOR_TRANSFORM_NORMAL:
       break;
@@ -136,10 +142,12 @@ meta_renderer_view_transform_rect_to_onscreen (ClutterStageView            *view
                                                cairo_rectangle_int_t       *dst_rect)
 {
   MetaRendererView *renderer_view = META_RENDERER_VIEW (view);
+  MetaRendererViewPrivate *priv =
+    meta_renderer_view_get_instance_private (renderer_view);
   MetaMonitorTransform inverted_transform;
 
   inverted_transform =
-    meta_monitor_transform_invert (renderer_view->transform);
+    meta_monitor_transform_invert (priv->transform);
   return meta_rectangle_transform (src_rect,
                                    inverted_transform,
                                    dst_width,
@@ -151,10 +159,13 @@ static void
 meta_renderer_view_set_transform (MetaRendererView     *view,
                                   MetaMonitorTransform  transform)
 {
-  if (view->transform == transform)
+  MetaRendererViewPrivate *priv =
+    meta_renderer_view_get_instance_private (view);
+
+  if (priv->transform == transform)
     return;
 
-  view->transform = transform;
+  priv->transform = transform;
   clutter_stage_view_invalidate_offscreen_blit_pipeline (CLUTTER_STAGE_VIEW (view));
 }
 
@@ -165,14 +176,16 @@ meta_renderer_view_get_property (GObject    *object,
                                  GParamSpec *pspec)
 {
   MetaRendererView *view = META_RENDERER_VIEW (object);
+  MetaRendererViewPrivate *priv =
+    meta_renderer_view_get_instance_private (view);
 
   switch (prop_id)
     {
     case PROP_TRANSFORM:
-      g_value_set_uint (value, view->transform);
+      g_value_set_uint (value, priv->transform);
       break;
     case PROP_CRTC:
-      g_value_set_object (value, view->crtc);
+      g_value_set_object (value, priv->crtc);
       break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
@@ -187,6 +200,8 @@ meta_renderer_view_set_property (GObject      *object,
                                  GParamSpec   *pspec)
 {
   MetaRendererView *view = META_RENDERER_VIEW (object);
+  MetaRendererViewPrivate *priv =
+    meta_renderer_view_get_instance_private (view);
 
   switch (prop_id)
     {
@@ -194,7 +209,7 @@ meta_renderer_view_set_property (GObject      *object,
       meta_renderer_view_set_transform (view, g_value_get_uint (value));
       break;
     case PROP_CRTC:
-      view->crtc = g_value_get_object (value);
+      priv->crtc = g_value_get_object (value);
       break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
diff --git a/src/backends/meta-renderer-view.h b/src/backends/meta-renderer-view.h
index 3f21c7c48..b6247f38c 100644
--- a/src/backends/meta-renderer-view.h
+++ b/src/backends/meta-renderer-view.h
@@ -22,10 +22,15 @@
 #include "backends/meta-stage-impl-private.h"
 #include "backends/meta-stage-view-private.h"
 
+struct _MetaRendererViewClass
+{
+  MetaStageViewClass parent_class;
+};
+
 #define META_TYPE_RENDERER_VIEW (meta_renderer_view_get_type ())
-G_DECLARE_FINAL_TYPE (MetaRendererView, meta_renderer_view,
-                      META, RENDERER_VIEW,
-                      MetaStageView)
+G_DECLARE_DERIVABLE_TYPE (MetaRendererView, meta_renderer_view,
+                          META, RENDERER_VIEW,
+                          MetaStageView)
 
 MetaMonitorTransform meta_renderer_view_get_transform (MetaRendererView *view);
 
diff --git a/src/backends/native/meta-renderer-native.c b/src/backends/native/meta-renderer-native.c
index d538cc25a..ea3513f02 100644
--- a/src/backends/native/meta-renderer-native.c
+++ b/src/backends/native/meta-renderer-native.c
@@ -62,6 +62,7 @@
 #include "backends/native/meta-render-device-gbm.h"
 #include "backends/native/meta-render-device-surfaceless.h"
 #include "backends/native/meta-renderer-native-private.h"
+#include "backends/native/meta-renderer-view-native.h"
 #include "cogl/cogl.h"
 #include "core/boxes-private.h"
 
@@ -1240,7 +1241,7 @@ meta_renderer_native_create_view (MetaRenderer       *renderer,
   int onscreen_width;
   int onscreen_height;
   MetaRectangle view_layout;
-  MetaRendererView *view;
+  MetaRendererViewNative *view_native;
   EGLSurface egl_surface;
   GError *error = NULL;
 
@@ -1352,26 +1353,27 @@ meta_renderer_native_create_view (MetaRenderer       *renderer,
   meta_rectangle_from_graphene_rect (&crtc_config->layout,
                                      META_ROUNDING_STRATEGY_ROUND,
                                      &view_layout);
-  view = g_object_new (META_TYPE_RENDERER_VIEW,
-                       "name", meta_output_get_name (output),
-                       "stage", meta_backend_get_stage (backend),
-                       "layout", &view_layout,
-                       "crtc", crtc,
-                       "scale", scale,
-                       "framebuffer", framebuffer,
-                       "offscreen", offscreen,
-                       "use-shadowfb", use_shadowfb,
-                       "transform", view_transform,
-                       "refresh-rate", crtc_mode_info->refresh_rate,
-                       "vblank-duration-us", crtc_mode_info->vblank_duration_us,
-                       NULL);
+  view_native = g_object_new (META_TYPE_RENDERER_VIEW_NATIVE,
+                              "name", meta_output_get_name (output),
+                              "stage", meta_backend_get_stage (backend),
+                              "layout", &view_layout,
+                              "crtc", crtc,
+                              "scale", scale,
+                              "framebuffer", framebuffer,
+                              "offscreen", offscreen,
+                              "use-shadowfb", use_shadowfb,
+                              "transform", view_transform,
+                              "refresh-rate", crtc_mode_info->refresh_rate,
+                              "vblank-duration-us", crtc_mode_info->vblank_duration_us,
+                              NULL);
 
   if (META_IS_ONSCREEN_NATIVE (framebuffer))
     {
       CoglDisplayEGL *cogl_display_egl;
       CoglOnscreenEgl *onscreen_egl;
 
-      meta_onscreen_native_set_view (COGL_ONSCREEN (framebuffer), view);
+      meta_onscreen_native_set_view (COGL_ONSCREEN (framebuffer),
+                                     META_RENDERER_VIEW (view_native));
 
       /* Ensure we don't point to stale surfaces when creating the offscreen */
       cogl_display_egl = cogl_display->winsys;
@@ -1383,7 +1385,7 @@ meta_renderer_native_create_view (MetaRenderer       *renderer,
                                      cogl_display_egl->egl_context);
     }
 
-  return view;
+  return META_RENDERER_VIEW (view_native);
 }
 
 static void
diff --git a/src/backends/native/meta-renderer-view-native.c b/src/backends/native/meta-renderer-view-native.c
new file mode 100644
index 000000000..e64a1476a
--- /dev/null
+++ b/src/backends/native/meta-renderer-view-native.c
@@ -0,0 +1,43 @@
+/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
+
+/*
+ * Copyright (C) 2020-2022 Dor Askayo
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+ * 02111-1307, USA.
+ *
+ * Written by:
+ *     Dor Askayo <dor.askayo@gmail.com>
+ */
+
+#include "backends/native/meta-renderer-view-native.h"
+
+struct _MetaRendererViewNative
+{
+  MetaRendererView parent;
+};
+
+G_DEFINE_TYPE (MetaRendererViewNative, meta_renderer_view_native,
+               META_TYPE_RENDERER_VIEW)
+
+static void
+meta_renderer_view_native_class_init (MetaRendererViewNativeClass *klass)
+{
+}
+
+static void
+meta_renderer_view_native_init (MetaRendererViewNative *view_native)
+{
+}
diff --git a/src/backends/native/meta-renderer-view-native.h b/src/backends/native/meta-renderer-view-native.h
new file mode 100644
index 000000000..34c37939c
--- /dev/null
+++ b/src/backends/native/meta-renderer-view-native.h
@@ -0,0 +1,34 @@
+/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
+
+/*
+ * Copyright (C) 2020-2022 Dor Askayo
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+ * 02111-1307, USA.
+ *
+ * Written by:
+ *     Dor Askayo <dor.askayo@gmail.com>
+ */
+
+#ifndef META_RENDERER_VIEW_NATIVE_H
+#define META_RENDERER_VIEW_NATIVE_H
+
+#include "backends/meta-renderer-view.h"
+
+#define META_TYPE_RENDERER_VIEW_NATIVE (meta_renderer_view_native_get_type ())
+G_DECLARE_FINAL_TYPE (MetaRendererViewNative, meta_renderer_view_native,
+                      META, RENDERER_VIEW_NATIVE, MetaRendererView)
+
+#endif /* META_RENDERER_VIEW_NATIVE_H */
diff --git a/src/meson.build b/src/meson.build
index 13a69c1a6..0d1a78fc9 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -769,6 +769,8 @@ if have_native_backend
     'backends/native/meta-renderer-native-private.h',
     'backends/native/meta-renderer-native.c',
     'backends/native/meta-renderer-native.h',
+    'backends/native/meta-renderer-view-native.c',
+    'backends/native/meta-renderer-view-native.h',
     'backends/native/meta-seat-impl.c',
     'backends/native/meta-seat-impl.h',
     'backends/native/meta-seat-native.c',
-- 
2.37.1


From 639031f0f2a01cc2975de78b5d5162dd1f4ef2b4 Mon Sep 17 00:00:00 2001
From: Dor Askayo <dor.askayo@gmail.com>
Date: Sat, 4 Jul 2020 22:13:55 +0300
Subject: [PATCH 10/27] renderer-view/native: Allow syncing frame clock updates
 with actor updates

Allow per-view tracking of actors for the purpose of synchronizing
the frame clock to their updates.

This uses the variable mode of ClutterFrameClock to either perform an
immediate update or a delayed update depending on whether the update
is performed in the context of the tracked actor or a different one.

This approach achieves a minimal latency between updates of the actor
and updates of the view, and delays updates of the view when the
tracked actor has not updated.

Changes in the synchronization mode are applied asynchronously at the
preparation phase of the next frame.

If the tracked actor is frozen or destroyed, the synchornization is
stopped as no further updates from the actor are expected.

For now, the only applicable synchronization mode is
META_FRAME_SYNC_MODE_DISABLED, which doesn't synchronize to actor
updates and keeps the frame clock on the its default fixed mode.
When support for VRR is added in the commits to follow,
META_FRAME_SYNC_MODE_ENABLED will be set when appropriate.
---
 src/backends/native/meta-renderer-native.c    |   1 +
 .../native/meta-renderer-view-native.c        | 152 ++++++++++++++++++
 .../native/meta-renderer-view-native.h        |   5 +
 3 files changed, 158 insertions(+)

diff --git a/src/backends/native/meta-renderer-native.c b/src/backends/native/meta-renderer-native.c
index ea3513f02..a45b20806 100644
--- a/src/backends/native/meta-renderer-native.c
+++ b/src/backends/native/meta-renderer-native.c
@@ -1453,6 +1453,7 @@ meta_renderer_native_prepare_frame (MetaRendererNative *renderer_native,
   kms_device = meta_kms_crtc_get_device (kms_crtc);
 
   meta_crtc_kms_maybe_set_gamma (crtc_kms, kms_device);
+  meta_renderer_view_native_maybe_set_frame_sync (META_RENDERER_VIEW_NATIVE (view));
 }
 
 void
diff --git a/src/backends/native/meta-renderer-view-native.c b/src/backends/native/meta-renderer-view-native.c
index e64a1476a..c2b38e980 100644
--- a/src/backends/native/meta-renderer-view-native.c
+++ b/src/backends/native/meta-renderer-view-native.c
@@ -24,20 +24,172 @@
 
 #include "backends/native/meta-renderer-view-native.h"
 
+#include "clutter/clutter.h"
+
+typedef enum _MetaFrameSyncMode
+{
+  META_FRAME_SYNC_MODE_INIT,
+  META_FRAME_SYNC_MODE_ENABLED,
+  META_FRAME_SYNC_MODE_DISABLED,
+} MetaFrameSyncMode;
+
 struct _MetaRendererViewNative
 {
   MetaRendererView parent;
+
+  gboolean frame_sync_mode_update_queued;
+
+  MetaFrameSyncMode frame_sync_mode;
+  ClutterActor *frame_sync_actor;
+
+  gulong frame_sync_actor_frozen_id;
+  gulong frame_sync_actor_destroy_id;
 };
 
 G_DEFINE_TYPE (MetaRendererViewNative, meta_renderer_view_native,
                META_TYPE_RENDERER_VIEW)
 
+static void
+on_frame_sync_actor_frozen (ClutterActor           *actor,
+                            MetaRendererViewNative *view_native)
+{
+  meta_renderer_view_native_set_frame_sync_actor (view_native, NULL);
+}
+
+static void
+on_frame_sync_actor_destroyed (ClutterActor           *actor,
+                               MetaRendererViewNative *view_native)
+{
+  meta_renderer_view_native_set_frame_sync_actor (view_native, NULL);
+}
+
+static void
+meta_renderer_view_native_schedule_actor_update (ClutterStageView *stage_view,
+                                                 ClutterActor     *actor)
+{
+  MetaRendererViewNative *view_native = META_RENDERER_VIEW_NATIVE (stage_view);
+  ClutterFrameClock *frame_clock;
+
+  g_return_if_fail (actor != NULL);
+
+  frame_clock = clutter_stage_view_get_frame_clock (stage_view);
+
+  if (view_native->frame_sync_mode == META_FRAME_SYNC_MODE_ENABLED &&
+      actor == view_native->frame_sync_actor)
+    clutter_frame_clock_schedule_update_now (frame_clock);
+  else
+    clutter_frame_clock_schedule_update (frame_clock);
+}
+
+void
+meta_renderer_view_native_set_frame_sync_actor (MetaRendererViewNative *view_native,
+                                                ClutterActor           *actor)
+{
+  if (G_LIKELY (actor == view_native->frame_sync_actor))
+    return;
+
+  g_clear_signal_handler (&view_native->frame_sync_actor_frozen_id,
+                          view_native->frame_sync_actor);
+  g_clear_signal_handler (&view_native->frame_sync_actor_destroy_id,
+                          view_native->frame_sync_actor);
+
+  if (actor)
+    {
+      view_native->frame_sync_actor_frozen_id =
+        g_signal_connect (actor, "frozen",
+                          G_CALLBACK (on_frame_sync_actor_frozen),
+                          view_native);
+      view_native->frame_sync_actor_destroy_id =
+        g_signal_connect (actor, "destroy",
+                          G_CALLBACK (on_frame_sync_actor_destroyed),
+                          view_native);
+    }
+
+  view_native->frame_sync_actor = actor;
+
+  view_native->frame_sync_mode_update_queued = TRUE;
+}
+
+static void
+meta_renderer_view_native_set_frame_sync (MetaRendererViewNative *view_native,
+                                          MetaFrameSyncMode       sync_mode)
+{
+  ClutterFrameClock *frame_clock =
+    clutter_stage_view_get_frame_clock (CLUTTER_STAGE_VIEW (view_native));
+
+  switch (sync_mode)
+    {
+    case META_FRAME_SYNC_MODE_ENABLED:
+      clutter_frame_clock_set_mode (frame_clock,
+                                    CLUTTER_FRAME_CLOCK_MODE_VARIABLE);
+      break;
+    case META_FRAME_SYNC_MODE_DISABLED:
+      clutter_frame_clock_set_mode (frame_clock,
+                                    CLUTTER_FRAME_CLOCK_MODE_FIXED);
+      break;
+    case META_FRAME_SYNC_MODE_INIT:
+      g_assert_not_reached ();
+    }
+
+  view_native->frame_sync_mode = sync_mode;
+}
+
+static MetaFrameSyncMode
+meta_renderer_view_native_get_applicable_sync_mode (MetaRendererViewNative *view_native)
+{
+  return META_FRAME_SYNC_MODE_DISABLED;
+}
+
+void
+meta_renderer_view_native_maybe_set_frame_sync (MetaRendererViewNative *view_native)
+{
+  MetaFrameSyncMode applicable_sync_mode;
+
+  if (G_LIKELY (!view_native->frame_sync_mode_update_queued))
+    return;
+
+  view_native->frame_sync_mode_update_queued = FALSE;
+
+  applicable_sync_mode =
+    meta_renderer_view_native_get_applicable_sync_mode (view_native);
+
+  if (applicable_sync_mode != view_native->frame_sync_mode)
+    {
+      meta_renderer_view_native_set_frame_sync (view_native,
+                                                applicable_sync_mode);
+    }
+}
+
+static void
+meta_renderer_view_native_dispose (GObject *object)
+{
+  MetaRendererViewNative *view_native = META_RENDERER_VIEW_NATIVE (object);
+
+  if (view_native->frame_sync_actor)
+    {
+      g_clear_signal_handler (&view_native->frame_sync_actor_destroy_id,
+                              view_native->frame_sync_actor);
+      g_clear_signal_handler (&view_native->frame_sync_actor_frozen_id,
+                              view_native->frame_sync_actor);
+    }
+
+  G_OBJECT_CLASS (meta_renderer_view_native_parent_class)->dispose (object);
+}
+
 static void
 meta_renderer_view_native_class_init (MetaRendererViewNativeClass *klass)
 {
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+  ClutterStageViewClass *clutter_stage_view_class = CLUTTER_STAGE_VIEW_CLASS (klass);
+
+  object_class->dispose = meta_renderer_view_native_dispose;
+
+  clutter_stage_view_class->schedule_actor_update = meta_renderer_view_native_schedule_actor_update;
 }
 
 static void
 meta_renderer_view_native_init (MetaRendererViewNative *view_native)
 {
+  view_native->frame_sync_mode_update_queued = TRUE;
+  view_native->frame_sync_mode = META_FRAME_SYNC_MODE_INIT;
 }
diff --git a/src/backends/native/meta-renderer-view-native.h b/src/backends/native/meta-renderer-view-native.h
index 34c37939c..16e3a8d48 100644
--- a/src/backends/native/meta-renderer-view-native.h
+++ b/src/backends/native/meta-renderer-view-native.h
@@ -31,4 +31,9 @@
 G_DECLARE_FINAL_TYPE (MetaRendererViewNative, meta_renderer_view_native,
                       META, RENDERER_VIEW_NATIVE, MetaRendererView)
 
+void meta_renderer_view_native_set_frame_sync_actor (MetaRendererViewNative *view_native,
+                                                     ClutterActor           *actor);
+
+void meta_renderer_view_native_maybe_set_frame_sync (MetaRendererViewNative *view_native);
+
 #endif /* META_RENDERER_VIEW_NATIVE_H */
-- 
2.37.1


From 5e3aa23dd5ee3517bfbcd7d7959ceddbdf9f078d Mon Sep 17 00:00:00 2001
From: Dor Askayo <dor.askayo@gmail.com>
Date: Sun, 16 Aug 2020 20:11:48 +0300
Subject: [PATCH 11/27] wayland/actor-surface: Schedule actor updates for frame
 callbacks

---
 src/wayland/meta-wayland-actor-surface.c | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/src/wayland/meta-wayland-actor-surface.c b/src/wayland/meta-wayland-actor-surface.c
index b6d26fdc1..096b46aa2 100644
--- a/src/wayland/meta-wayland-actor-surface.c
+++ b/src/wayland/meta-wayland-actor-surface.c
@@ -307,7 +307,8 @@ meta_wayland_actor_surface_apply_state (MetaWaylandSurfaceRole  *surface_role,
       MetaBackend *backend = meta_get_backend ();
       ClutterActor *stage = meta_backend_get_stage (backend);
 
-      clutter_stage_schedule_update (CLUTTER_STAGE (stage));
+      clutter_stage_schedule_actor_update (CLUTTER_STAGE (stage),
+                                           CLUTTER_ACTOR (priv->actor));
     }
 
   meta_wayland_actor_surface_queue_frame_callbacks (actor_surface, pending);
-- 
2.37.1


From 9bfae07dd6bf0659afc99912021bdd40e6a59c19 Mon Sep 17 00:00:00 2001
From: Dor Askayo <dor.askayo@gmail.com>
Date: Sun, 16 Aug 2020 10:07:54 +0300
Subject: [PATCH 12/27] clutter/stage: Always schedule actor updates on redraw

When updates are scheduled in the context of specific actors,
already-scheduled updates may need to be rescheduled based on the
actor requesting the update.

Allow scheduling updates for actors when the stage is already
pending a redraw.
---
 clutter/clutter/clutter-stage.c | 21 +--------------------
 1 file changed, 1 insertion(+), 20 deletions(-)

diff --git a/clutter/clutter/clutter-stage.c b/clutter/clutter/clutter-stage.c
index 3e81655e0..f40df1017 100644
--- a/clutter/clutter/clutter-stage.c
+++ b/clutter/clutter/clutter-stage.c
@@ -127,8 +127,6 @@ struct _ClutterStagePrivate
 
   int update_freeze_count;
 
-  gboolean pending_finish_queue_redraws;
-
   GHashTable *pointer_devices;
   GHashTable *touch_sequences;
 
@@ -2548,19 +2546,7 @@ clutter_stage_queue_actor_redraw (ClutterStage             *stage,
   CLUTTER_NOTE (CLIPPING, "stage_queue_actor_redraw (actor=%s, clip=%p): ",
                 _clutter_actor_get_debug_name (actor), clip);
 
-  if (!priv->pending_finish_queue_redraws)
-    {
-      GList *l;
-
-      for (l = clutter_stage_peek_stage_views (stage); l; l = l->next)
-        {
-          ClutterStageView *view = l->data;
-
-          clutter_stage_view_schedule_update (view);
-        }
-
-      priv->pending_finish_queue_redraws = TRUE;
-    }
+  clutter_stage_schedule_actor_update (stage, actor);
 
   entry = g_hash_table_lookup (priv->pending_queue_redraws, actor);
 
@@ -2684,11 +2670,6 @@ clutter_stage_maybe_finish_queue_redraws (ClutterStage *stage)
 
   COGL_TRACE_BEGIN_SCOPED (ClutterStageFinishQueueRedraws, "FinishQueueRedraws");
 
-  if (!priv->pending_finish_queue_redraws)
-    return;
-
-  priv->pending_finish_queue_redraws = FALSE;
-
   g_hash_table_iter_init (&iter, priv->pending_queue_redraws);
   while (g_hash_table_iter_next (&iter, &key, &value))
     {
-- 
2.37.1


From 39b8a5895c3fb67e9cf8fa993b732b71402c66a7 Mon Sep 17 00:00:00 2001
From: Dor Askayo <dor.askayo@gmail.com>
Date: Sun, 10 Jul 2022 14:44:34 +0300
Subject: [PATCH 13/27] compositor: Introduce MetaCompositorView

MetaCompositorView is a class which contains compositor logic
specific to ClutterStageViews.

Each MetaCompositorView is "attached" to a ClutterStageView as an
opaque pointer using g_object_set_qdata_full (), and is freed when
the ClutterStageView is destroyed. This ensures that the lifetime of
the MetaCompositorView can't extend beyond the lifetime of its
ClutterStageView.

In a following commit, MetaCompositorView will be expanded to allow
keeping track of the top MetaWindowActor located on each
ClutterStageView.
---
 src/compositor/compositor.c           |  53 +++++++++++
 src/compositor/meta-compositor-view.c | 127 ++++++++++++++++++++++++++
 src/compositor/meta-compositor-view.h |  45 +++++++++
 src/meson.build                       |   2 +
 4 files changed, 227 insertions(+)
 create mode 100644 src/compositor/meta-compositor-view.c
 create mode 100644 src/compositor/meta-compositor-view.h

diff --git a/src/compositor/compositor.c b/src/compositor/compositor.c
index 6f4982553..fe732da03 100644
--- a/src/compositor/compositor.c
+++ b/src/compositor/compositor.c
@@ -61,6 +61,7 @@
 #include "backends/x11/meta-stage-x11.h"
 #include "clutter/clutter-mutter.h"
 #include "cogl/cogl.h"
+#include "compositor/meta-compositor-view.h"
 #include "compositor/meta-later-private.h"
 #include "compositor/meta-window-actor-x11.h"
 #include "compositor/meta-window-actor-private.h"
@@ -108,6 +109,7 @@ typedef struct _MetaCompositorPrivate
   gulong before_paint_handler_id;
   gulong after_paint_handler_id;
   gulong window_visibility_updated_id;
+  gulong monitors_changed_internal_id;
 
   int64_t server_time_query_time;
   int64_t server_time_offset;
@@ -137,6 +139,8 @@ typedef struct _MetaCompositorPrivate
 G_DEFINE_ABSTRACT_TYPE_WITH_PRIVATE (MetaCompositor, meta_compositor,
                                      G_TYPE_OBJECT)
 
+static GQuark quark_compositor_view;
+
 static void
 on_presented (ClutterStage     *stage,
               ClutterStageView *stage_view,
@@ -926,6 +930,35 @@ meta_compositor_sync_window_geometry (MetaCompositor *compositor,
     meta_plugin_manager_event_size_changed (priv->plugin_mgr, window_actor);
 }
 
+static void
+meta_compositor_ensure_compositor_views (MetaCompositor *compositor)
+{
+  MetaCompositorPrivate *priv =
+    meta_compositor_get_instance_private (compositor);
+  ClutterStage *stage =
+    CLUTTER_STAGE (meta_backend_get_stage (priv->backend));
+  GList *l;
+
+  for (l = clutter_stage_peek_stage_views (stage); l; l = l->next)
+    {
+      ClutterStageView *stage_view = l->data;
+      MetaCompositorView *compositor_view;
+
+      compositor_view = g_object_get_qdata (G_OBJECT (stage_view),
+                                            quark_compositor_view);
+
+      if (compositor_view)
+        continue;
+
+      compositor_view = meta_compositor_view_new (stage_view);
+
+      g_object_set_qdata_full (G_OBJECT (stage_view),
+                               quark_compositor_view,
+                               compositor_view,
+                               g_object_unref);
+    }
+}
+
 static void
 on_presented (ClutterStage     *stage,
               ClutterStageView *stage_view,
@@ -1053,6 +1086,13 @@ on_window_visibility_updated (MetaDisplay    *display,
   update_top_window_actor (compositor);
 }
 
+static void
+on_monitors_changed_internal (MetaMonitorManager *monitor_manager,
+                              MetaCompositor     *compositor)
+{
+  meta_compositor_ensure_compositor_views (compositor);
+}
+
 static void
 meta_compositor_set_property (GObject      *object,
                               guint         prop_id,
@@ -1113,6 +1153,8 @@ meta_compositor_constructed (GObject *object)
   ClutterBackend *clutter_backend =
     meta_backend_get_clutter_backend (priv->backend);
   ClutterActor *stage = meta_backend_get_stage (priv->backend);
+  MetaMonitorManager *monitor_manager =
+    meta_backend_get_monitor_manager (priv->backend);
 
   priv->context = clutter_backend->cogl_context;
 
@@ -1133,9 +1175,17 @@ meta_compositor_constructed (GObject *object)
                       G_CALLBACK (on_window_visibility_updated),
                       compositor);
 
+  priv->monitors_changed_internal_id =
+    g_signal_connect (monitor_manager,
+                      "monitors-changed-internal",
+                      G_CALLBACK (on_monitors_changed_internal),
+                      compositor);
+
   priv->laters = meta_laters_new (compositor);
 
   G_OBJECT_CLASS (meta_compositor_parent_class)->constructed (object);
+
+  meta_compositor_ensure_compositor_views (compositor);
 }
 
 static void
@@ -1190,6 +1240,9 @@ meta_compositor_class_init (MetaCompositorClass *klass)
                          G_PARAM_CONSTRUCT_ONLY |
                          G_PARAM_STATIC_STRINGS);
   g_object_class_install_properties (object_class, N_PROPS, obj_props);
+
+  quark_compositor_view =
+    g_quark_from_static_string ("-meta-compositor-view");
 }
 
 /**
diff --git a/src/compositor/meta-compositor-view.c b/src/compositor/meta-compositor-view.c
new file mode 100644
index 000000000..23a75e17c
--- /dev/null
+++ b/src/compositor/meta-compositor-view.c
@@ -0,0 +1,127 @@
+/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
+
+/*
+ * Copyright (C) 2022 Dor Askayo
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+ * 02111-1307, USA.
+ *
+ * Written by:
+ *     Dor Askayo <dor.askayo@gmail.com>
+ */
+
+#include "compositor/meta-compositor-view.h"
+
+enum
+{
+  PROP_0,
+
+  PROP_STAGE_VIEW,
+
+  N_PROPS
+};
+
+static GParamSpec *obj_props[N_PROPS];
+
+typedef struct _MetaCompositorViewPrivate
+{
+  ClutterStageView *stage_view;
+} MetaCompositorViewPrivate;
+
+G_DEFINE_TYPE_WITH_PRIVATE (MetaCompositorView, meta_compositor_view,
+                            G_TYPE_OBJECT)
+
+MetaCompositorView *
+meta_compositor_view_new (ClutterStageView *stage_view)
+{
+  g_assert (stage_view);
+
+  return g_object_new (META_TYPE_COMPOSITOR_VIEW,
+                       "stage-view", stage_view,
+                       NULL);
+}
+
+ClutterStageView *
+meta_compositor_view_get_stage_view (MetaCompositorView *compositor_view)
+{
+  MetaCompositorViewPrivate *priv =
+    meta_compositor_view_get_instance_private (compositor_view);
+
+  return priv->stage_view;
+}
+
+static void
+meta_compositor_view_set_property (GObject      *object,
+                                   guint         prop_id,
+                                   const GValue *value,
+                                   GParamSpec   *pspec)
+{
+  MetaCompositorView *compositor_view = META_COMPOSITOR_VIEW (object);
+  MetaCompositorViewPrivate *priv =
+    meta_compositor_view_get_instance_private (compositor_view);
+
+  switch (prop_id)
+    {
+    case PROP_STAGE_VIEW:
+      priv->stage_view = g_value_get_object (value);
+      break;
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
+    }
+}
+
+static void
+meta_compositor_view_get_property (GObject    *object,
+                                   guint       prop_id,
+                                   GValue     *value,
+                                   GParamSpec *pspec)
+{
+  MetaCompositorView *compositor_view = META_COMPOSITOR_VIEW (object);
+  MetaCompositorViewPrivate *priv =
+    meta_compositor_view_get_instance_private (compositor_view);
+
+  switch (prop_id)
+    {
+    case PROP_STAGE_VIEW:
+      g_value_set_object (value, priv->stage_view);
+      break;
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
+    }
+}
+
+static void
+meta_compositor_view_class_init (MetaCompositorViewClass *klass)
+{
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+
+  object_class->set_property = meta_compositor_view_set_property;
+  object_class->get_property = meta_compositor_view_get_property;
+
+  obj_props[PROP_STAGE_VIEW] =
+    g_param_spec_object ("stage-view",
+                         "stage-view",
+                         "ClutterStageView",
+                         CLUTTER_TYPE_STAGE_VIEW,
+                         G_PARAM_READWRITE |
+                         G_PARAM_CONSTRUCT_ONLY |
+                         G_PARAM_STATIC_STRINGS);
+  g_object_class_install_properties (object_class, N_PROPS, obj_props);
+}
+
+static void
+meta_compositor_view_init (MetaCompositorView *compositor_view)
+{
+}
diff --git a/src/compositor/meta-compositor-view.h b/src/compositor/meta-compositor-view.h
new file mode 100644
index 000000000..bed3404f7
--- /dev/null
+++ b/src/compositor/meta-compositor-view.h
@@ -0,0 +1,45 @@
+/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
+
+/*
+ * Copyright (C) 2022 Dor Askayo
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+ * 02111-1307, USA.
+ *
+ * Written by:
+ *     Dor Askayo <dor.askayo@gmail.com>
+ */
+
+#ifndef META_COMPOSITOR_VIEW_H
+#define META_COMPOSITOR_VIEW_H
+
+#include <glib-object.h>
+
+#include "clutter/clutter-mutter.h"
+
+struct _MetaCompositorViewClass
+{
+  GObjectClass parent_class;
+};
+
+#define META_TYPE_COMPOSITOR_VIEW (meta_compositor_view_get_type ())
+G_DECLARE_FINAL_TYPE (MetaCompositorView, meta_compositor_view,
+                      META, COMPOSITOR_VIEW, GObject)
+
+MetaCompositorView *meta_compositor_view_new (ClutterStageView *stage_view);
+
+ClutterStageView *meta_compositor_view_get_stage_view (MetaCompositorView *compositor_view);
+
+#endif /* META_COMPOSITOR_VIEW_H */
diff --git a/src/meson.build b/src/meson.build
index 0d1a78fc9..40231444d 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -320,6 +320,8 @@ mutter_sources = [
   'compositor/meta-background-private.h',
   'compositor/meta-compositor-server.c',
   'compositor/meta-compositor-server.h',
+  'compositor/meta-compositor-view.c',
+  'compositor/meta-compositor-view.h',
   'compositor/meta-compositor-x11.c',
   'compositor/meta-compositor-x11.h',
   'compositor/meta-cullable.c',
-- 
2.37.1


From 9fb29722e583fbe7a457af73eb6456d3d192c58a Mon Sep 17 00:00:00 2001
From: Dor Askayo <dor.askayo@gmail.com>
Date: Mon, 11 Jul 2022 12:23:24 +0300
Subject: [PATCH 14/27] compositor: Expose the MetaCompositorView in
 before_paint () vfunc

The idea is that the state of the MetaCompositorView shall be
up-to-date only in specific scenarios, thus allowing operations
performed on it to be queued and aggregated to be handled in the
right time, and only if they are still necessary.

For example, in a following commit, the top window actor in each
view will be planned (if needed) only once before painting a frame,
rendering the top window actor in the MetaCompositorView potentially
stale in all other times.

Similarly, if a MetaCompositorView is destroyed before the beginning
of the frame, a queued operation to update its top window actor can be
discarded.

As an interface segragation measure, and as part of an attempt to
avoid the use of g_return_if_fail () to check the validity of the
MetaCompositorView's state in multiple places (which is still prone to
human error), the interfaces through which a MetaCompositorView is
made available would only ones where it's state is gurenteed to be
up-to-date.

Specifically, this commit gurentees that the state of the
MetaCompositorView would be up-to-date during the before_paint () and
after_paint () vfuncs exposed to child classes of the MetaCompositor.

The frame_in_progress variable will be used in a following commit to
guarantee that the MetaCompositorView's state is not invalidated during
this time.
---
 src/compositor/compositor-private.h     |  9 ++--
 src/compositor/compositor.c             | 58 +++++++++++++++++++------
 src/compositor/meta-compositor-native.c |  6 +--
 src/compositor/meta-compositor-x11.c    |  6 +--
 4 files changed, 56 insertions(+), 23 deletions(-)

diff --git a/src/compositor/compositor-private.h b/src/compositor/compositor-private.h
index d3b3145a3..6d62af855 100644
--- a/src/compositor/compositor-private.h
+++ b/src/compositor/compositor-private.h
@@ -7,6 +7,7 @@
 
 #include "clutter/clutter-mutter.h"
 #include "clutter/clutter.h"
+#include "compositor/meta-compositor-view.h"
 #include "compositor/meta-plugin-manager.h"
 #include "compositor/meta-window-actor-private.h"
 #include "meta/compositor.h"
@@ -24,10 +25,10 @@ struct _MetaCompositorClass
   gboolean (* manage) (MetaCompositor  *compositor,
                        GError         **error);
   void (* unmanage) (MetaCompositor *compositor);
-  void (* before_paint) (MetaCompositor   *compositor,
-                         ClutterStageView *stage_view);
-  void (* after_paint) (MetaCompositor   *compositor,
-                        ClutterStageView *stage_view);
+  void (* before_paint) (MetaCompositor     *compositor,
+                         MetaCompositorView *compositor_view);
+  void (* after_paint) (MetaCompositor     *compositor,
+                        MetaCompositorView *compositor_view);
   void (* remove_window) (MetaCompositor *compositor,
                           MetaWindow     *window);
   int64_t (* monotonic_to_high_res_xserver_time) (MetaCompositor *compositor,
diff --git a/src/compositor/compositor.c b/src/compositor/compositor.c
index fe732da03..04ae77f5c 100644
--- a/src/compositor/compositor.c
+++ b/src/compositor/compositor.c
@@ -61,7 +61,6 @@
 #include "backends/x11/meta-stage-x11.h"
 #include "clutter/clutter-mutter.h"
 #include "cogl/cogl.h"
-#include "compositor/meta-compositor-view.h"
 #include "compositor/meta-later-private.h"
 #include "compositor/meta-window-actor-x11.h"
 #include "compositor/meta-window-actor-private.h"
@@ -131,6 +130,8 @@ typedef struct _MetaCompositorPrivate
 
   int switch_workspace_in_progress;
 
+  gboolean frame_in_progress;
+
   MetaPluginManager *plugin_mgr;
 
   MetaLaters *laters;
@@ -986,34 +987,44 @@ on_presented (ClutterStage     *stage,
 }
 
 static void
-meta_compositor_real_before_paint (MetaCompositor   *compositor,
-                                   ClutterStageView *stage_view)
+meta_compositor_real_before_paint (MetaCompositor     *compositor,
+                                   MetaCompositorView *compositor_view)
 {
   MetaCompositorPrivate *priv =
     meta_compositor_get_instance_private (compositor);
+  ClutterStageView *stage_view;
   GList *l;
 
+  stage_view = meta_compositor_view_get_stage_view (compositor_view);
+
   for (l = priv->windows; l; l = l->next)
     meta_window_actor_before_paint (l->data, stage_view);
 }
 
 static void
-meta_compositor_before_paint (MetaCompositor   *compositor,
-                              ClutterStageView *stage_view)
+meta_compositor_before_paint (MetaCompositor     *compositor,
+                              MetaCompositorView *compositor_view)
 {
+  MetaCompositorPrivate *priv =
+    meta_compositor_get_instance_private (compositor);
+
   COGL_TRACE_BEGIN_SCOPED (MetaCompositorPrePaint,
                            "Compositor (before-paint)");
-  META_COMPOSITOR_GET_CLASS (compositor)->before_paint (compositor, stage_view);
+
+  priv->frame_in_progress = TRUE;
+
+  META_COMPOSITOR_GET_CLASS (compositor)->before_paint (compositor, compositor_view);
 }
 
 static void
-meta_compositor_real_after_paint (MetaCompositor   *compositor,
-                                  ClutterStageView *stage_view)
+meta_compositor_real_after_paint (MetaCompositor     *compositor,
+                                  MetaCompositorView *compositor_view)
 {
   MetaCompositorPrivate *priv =
     meta_compositor_get_instance_private (compositor);
   ClutterActor *stage_actor = meta_backend_get_stage (priv->backend);
   CoglGraphicsResetStatus status;
+  ClutterStageView *stage_view;
   GList *l;
 
   status = cogl_get_graphics_reset_status (priv->context);
@@ -1040,6 +1051,8 @@ meta_compositor_real_after_paint (MetaCompositor   *compositor,
       break;
     }
 
+  stage_view = meta_compositor_view_get_stage_view (compositor_view);
+
   for (l = priv->windows; l; l = l->next)
     {
       ClutterActor *actor = l->data;
@@ -1052,12 +1065,17 @@ meta_compositor_real_after_paint (MetaCompositor   *compositor,
 }
 
 static void
-meta_compositor_after_paint (MetaCompositor   *compositor,
-                             ClutterStageView *stage_view)
+meta_compositor_after_paint (MetaCompositor     *compositor,
+                             MetaCompositorView *compositor_view)
 {
+  MetaCompositorPrivate *priv =
+    meta_compositor_get_instance_private (compositor);
+
   COGL_TRACE_BEGIN_SCOPED (MetaCompositorPostPaint,
                            "Compositor (after-paint)");
-  META_COMPOSITOR_GET_CLASS (compositor)->after_paint (compositor, stage_view);
+  META_COMPOSITOR_GET_CLASS (compositor)->after_paint (compositor, compositor_view);
+
+  priv->frame_in_progress = FALSE;
 }
 
 static void
@@ -1065,7 +1083,14 @@ on_before_paint (ClutterStage     *stage,
                  ClutterStageView *stage_view,
                  MetaCompositor   *compositor)
 {
-  meta_compositor_before_paint (compositor, stage_view);
+  MetaCompositorView *compositor_view;
+
+  compositor_view = g_object_get_qdata (G_OBJECT (stage_view),
+                                        quark_compositor_view);
+
+  g_assert (compositor_view);
+
+  meta_compositor_before_paint (compositor, compositor_view);
 }
 
 static void
@@ -1073,7 +1098,14 @@ on_after_paint (ClutterStage     *stage,
                 ClutterStageView *stage_view,
                 MetaCompositor   *compositor)
 {
-  meta_compositor_after_paint (compositor, stage_view);
+  MetaCompositorView *compositor_view;
+
+  compositor_view = g_object_get_qdata (G_OBJECT (stage_view),
+                                        quark_compositor_view);
+
+  g_assert (compositor_view);
+
+  meta_compositor_after_paint (compositor, compositor_view);
 }
 
 static void
diff --git a/src/compositor/meta-compositor-native.c b/src/compositor/meta-compositor-native.c
index bc17704e1..c26890501 100644
--- a/src/compositor/meta-compositor-native.c
+++ b/src/compositor/meta-compositor-native.c
@@ -156,8 +156,8 @@ done:
 #endif /* HAVE_WAYLAND */
 
 static void
-meta_compositor_native_before_paint (MetaCompositor   *compositor,
-                                     ClutterStageView *stage_view)
+meta_compositor_native_before_paint (MetaCompositor     *compositor,
+                                     MetaCompositorView *compositor_view)
 {
   MetaCompositorClass *parent_class;
 
@@ -166,7 +166,7 @@ meta_compositor_native_before_paint (MetaCompositor   *compositor,
 #endif
 
   parent_class = META_COMPOSITOR_CLASS (meta_compositor_native_parent_class);
-  parent_class->before_paint (compositor, stage_view);
+  parent_class->before_paint (compositor, compositor_view);
 }
 
 MetaCompositorNative *
diff --git a/src/compositor/meta-compositor-x11.c b/src/compositor/meta-compositor-x11.c
index 614bec674..8145efb5d 100644
--- a/src/compositor/meta-compositor-x11.c
+++ b/src/compositor/meta-compositor-x11.c
@@ -385,8 +385,8 @@ on_after_update (ClutterStage     *stage,
 }
 
 static void
-meta_compositor_x11_before_paint (MetaCompositor   *compositor,
-                                  ClutterStageView *stage_view)
+meta_compositor_x11_before_paint (MetaCompositor     *compositor,
+                                  MetaCompositorView *compositor_view)
 {
   MetaCompositorX11 *compositor_x11 = META_COMPOSITOR_X11 (compositor);
   MetaCompositorClass *parent_class;
@@ -394,7 +394,7 @@ meta_compositor_x11_before_paint (MetaCompositor   *compositor,
   maybe_unredirect_top_window (compositor_x11);
 
   parent_class = META_COMPOSITOR_CLASS (meta_compositor_x11_parent_class);
-  parent_class->before_paint (compositor, stage_view);
+  parent_class->before_paint (compositor, compositor_view);
 }
 
 static void
-- 
2.37.1


From abfcd03570112a017c81e74b03213f1eb5adbc30 Mon Sep 17 00:00:00 2001
From: Dor Askayo <dor.askayo@gmail.com>
Date: Sat, 2 Jul 2022 22:51:13 +0300
Subject: [PATCH 15/27] compositor: Keep track of the top window actor on each
 view

First, add logic in MetaCompositorView to find topmost visible
MetaWindowActor on its view, and expose it through a new API.

Then, queue an update to find the top MetaWindowActor of each
MetaCompositorView in the following cases:
  1. The MetaCompositor is in its initial state.
  2. The window stack order has changed.
  3. A window has changed its visibility.
  4. A "stage-views-changed" signal was emitted for a MetaWindowActor.

Finally, perform the queued update in meta_compositor_before_paint (),
and assert that an update isn't queued during painting. This ensures
that the top window actor in the MetaCompositorView remains up-to-date
and available to child classes of MetaCompositor throughout the entire
paint stage.
---
 src/compositor/compositor-private.h   |  2 +
 src/compositor/compositor.c           | 54 +++++++++++++++++++++
 src/compositor/meta-compositor-view.c | 69 +++++++++++++++++++++++++++
 src/compositor/meta-compositor-view.h |  6 +++
 src/compositor/meta-window-actor.c    | 19 ++++++++
 5 files changed, 150 insertions(+)

diff --git a/src/compositor/compositor-private.h b/src/compositor/compositor-private.h
index 6d62af855..096373fbf 100644
--- a/src/compositor/compositor-private.h
+++ b/src/compositor/compositor-private.h
@@ -43,6 +43,8 @@ gboolean meta_compositor_do_manage (MetaCompositor  *compositor,
 void meta_compositor_remove_window_actor (MetaCompositor  *compositor,
                                           MetaWindowActor *window_actor);
 
+void meta_compositor_window_actor_stage_views_changed (MetaCompositor *compositor);
+
 void meta_switch_workspace_completed (MetaCompositor *compositor);
 
 MetaPluginManager * meta_compositor_get_plugin_manager (MetaCompositor *compositor);
diff --git a/src/compositor/compositor.c b/src/compositor/compositor.c
index 04ae77f5c..b9a8bcf7f 100644
--- a/src/compositor/compositor.c
+++ b/src/compositor/compositor.c
@@ -123,6 +123,8 @@ typedef struct _MetaCompositorPrivate
 
   CoglContext *context;
 
+  gboolean needs_update_top_window_actors;
+
   MetaWindowActor *top_window_actor;
   gulong top_window_actor_destroy_id;
 
@@ -592,6 +594,23 @@ meta_compositor_window_opacity_changed (MetaCompositor *compositor,
   meta_window_actor_update_opacity (window_actor);
 }
 
+static void
+meta_compositor_set_needs_update_top_window_actors (MetaCompositor *compositor)
+{
+  MetaCompositorPrivate *priv =
+    meta_compositor_get_instance_private (compositor);
+
+  g_assert (!priv->frame_in_progress);
+
+  priv->needs_update_top_window_actors = TRUE;
+}
+
+void
+meta_compositor_window_actor_stage_views_changed (MetaCompositor *compositor)
+{
+  meta_compositor_set_needs_update_top_window_actors (compositor);
+}
+
 gboolean
 meta_compositor_filter_keybinding (MetaCompositor *compositor,
                                    MetaKeyBinding *binding)
@@ -913,6 +932,7 @@ meta_compositor_sync_stack (MetaCompositor  *compositor,
   sync_actor_stacking (compositor);
 
   update_top_window_actor (compositor);
+  meta_compositor_set_needs_update_top_window_actors (compositor);
 }
 
 void
@@ -931,6 +951,36 @@ meta_compositor_sync_window_geometry (MetaCompositor *compositor,
     meta_plugin_manager_event_size_changed (priv->plugin_mgr, window_actor);
 }
 
+static void
+maybe_update_top_window_actor_for_views (MetaCompositor *compositor)
+{
+  MetaCompositorPrivate *priv =
+    meta_compositor_get_instance_private (compositor);
+  ClutterStage *stage;
+  GList *l;
+
+  if (!priv->needs_update_top_window_actors)
+    return;
+
+  priv->needs_update_top_window_actors = FALSE;
+
+  stage = CLUTTER_STAGE (meta_backend_get_stage (priv->backend));
+
+  for (l = clutter_stage_peek_stage_views (stage); l; l = l->next)
+    {
+      ClutterStageView *stage_view = l->data;
+      MetaCompositorView *compositor_view;
+
+      compositor_view = g_object_get_qdata (G_OBJECT (stage_view),
+                                            quark_compositor_view);
+
+      g_assert (compositor_view);
+
+      meta_compositor_view_update_top_window_actor (compositor_view,
+                                                    priv->windows);
+    }
+}
+
 static void
 meta_compositor_ensure_compositor_views (MetaCompositor *compositor)
 {
@@ -1011,6 +1061,8 @@ meta_compositor_before_paint (MetaCompositor     *compositor,
   COGL_TRACE_BEGIN_SCOPED (MetaCompositorPrePaint,
                            "Compositor (before-paint)");
 
+  maybe_update_top_window_actor_for_views (compositor);
+
   priv->frame_in_progress = TRUE;
 
   META_COMPOSITOR_GET_CLASS (compositor)->before_paint (compositor, compositor_view);
@@ -1116,6 +1168,7 @@ on_window_visibility_updated (MetaDisplay    *display,
                               MetaCompositor *compositor)
 {
   update_top_window_actor (compositor);
+  meta_compositor_set_needs_update_top_window_actors (compositor);
 }
 
 static void
@@ -1174,6 +1227,7 @@ meta_compositor_get_property (GObject    *object,
 static void
 meta_compositor_init (MetaCompositor *compositor)
 {
+  meta_compositor_set_needs_update_top_window_actors (compositor);
 }
 
 static void
diff --git a/src/compositor/meta-compositor-view.c b/src/compositor/meta-compositor-view.c
index 23a75e17c..8febba936 100644
--- a/src/compositor/meta-compositor-view.c
+++ b/src/compositor/meta-compositor-view.c
@@ -24,6 +24,10 @@
 
 #include "compositor/meta-compositor-view.h"
 
+#include "core/window-private.h"
+#include "meta/boxes.h"
+#include "meta/window.h"
+
 enum
 {
   PROP_0,
@@ -38,6 +42,8 @@ static GParamSpec *obj_props[N_PROPS];
 typedef struct _MetaCompositorViewPrivate
 {
   ClutterStageView *stage_view;
+
+  MetaWindowActor *top_window_actor;
 } MetaCompositorViewPrivate;
 
 G_DEFINE_TYPE_WITH_PRIVATE (MetaCompositorView, meta_compositor_view,
@@ -53,6 +59,58 @@ meta_compositor_view_new (ClutterStageView *stage_view)
                        NULL);
 }
 
+static MetaWindowActor *
+find_top_window_actor_on_view (ClutterStageView *stage_view,
+                               GList            *window_actors)
+{
+  GList *l;
+
+  for (l = g_list_last (window_actors); l; l = l->prev)
+    {
+      MetaWindowActor *window_actor = l->data;
+      MetaWindow *window =
+        meta_window_actor_get_meta_window (window_actor);
+      MetaRectangle buffer_rect;
+      MetaRectangle view_layout;
+
+      if (!window->visible_to_compositor)
+        continue;
+
+      meta_window_get_buffer_rect (window, &buffer_rect);
+      clutter_stage_view_get_layout (stage_view,
+                                     &view_layout);
+
+      if (meta_rectangle_overlap (&view_layout, &buffer_rect))
+        return window_actor;
+    }
+
+  return NULL;
+}
+
+void
+meta_compositor_view_update_top_window_actor (MetaCompositorView *compositor_view,
+                                              GList              *window_actors)
+{
+  MetaCompositorViewPrivate *priv =
+    meta_compositor_view_get_instance_private (compositor_view);
+  MetaWindowActor *top_window_actor;
+
+  top_window_actor = find_top_window_actor_on_view (priv->stage_view,
+                                                    window_actors);
+
+  g_set_weak_pointer (&priv->top_window_actor,
+                      top_window_actor);
+}
+
+MetaWindowActor *
+meta_compositor_view_get_top_window_actor (MetaCompositorView *compositor_view)
+{
+  MetaCompositorViewPrivate *priv =
+    meta_compositor_view_get_instance_private (compositor_view);
+
+  return priv->top_window_actor;
+}
+
 ClutterStageView *
 meta_compositor_view_get_stage_view (MetaCompositorView *compositor_view)
 {
@@ -102,6 +160,16 @@ meta_compositor_view_get_property (GObject    *object,
     }
 }
 
+static void
+meta_compositor_view_finalize (GObject *object)
+{
+  MetaCompositorView *compositor_view = META_COMPOSITOR_VIEW (object);
+  MetaCompositorViewPrivate *priv =
+    meta_compositor_view_get_instance_private (compositor_view);
+
+  g_clear_weak_pointer (&priv->top_window_actor);
+}
+
 static void
 meta_compositor_view_class_init (MetaCompositorViewClass *klass)
 {
@@ -109,6 +177,7 @@ meta_compositor_view_class_init (MetaCompositorViewClass *klass)
 
   object_class->set_property = meta_compositor_view_set_property;
   object_class->get_property = meta_compositor_view_get_property;
+  object_class->finalize = meta_compositor_view_finalize;
 
   obj_props[PROP_STAGE_VIEW] =
     g_param_spec_object ("stage-view",
diff --git a/src/compositor/meta-compositor-view.h b/src/compositor/meta-compositor-view.h
index bed3404f7..5588867fd 100644
--- a/src/compositor/meta-compositor-view.h
+++ b/src/compositor/meta-compositor-view.h
@@ -28,6 +28,7 @@
 #include <glib-object.h>
 
 #include "clutter/clutter-mutter.h"
+#include "meta/meta-window-actor.h"
 
 struct _MetaCompositorViewClass
 {
@@ -40,6 +41,11 @@ G_DECLARE_FINAL_TYPE (MetaCompositorView, meta_compositor_view,
 
 MetaCompositorView *meta_compositor_view_new (ClutterStageView *stage_view);
 
+void meta_compositor_view_update_top_window_actor (MetaCompositorView *compositor_view,
+                                                   GList              *window_actors);
+
+MetaWindowActor *meta_compositor_view_get_top_window_actor (MetaCompositorView *compositor_view);
+
 ClutterStageView *meta_compositor_view_get_stage_view (MetaCompositorView *compositor_view);
 
 #endif /* META_COMPOSITOR_VIEW_H */
diff --git a/src/compositor/meta-window-actor.c b/src/compositor/meta-window-actor.c
index ae1fa4d90..9fd9f758c 100644
--- a/src/compositor/meta-window-actor.c
+++ b/src/compositor/meta-window-actor.c
@@ -53,6 +53,8 @@ typedef struct _MetaWindowActorPrivate
   MetaWindow *window;
   MetaCompositor *compositor;
 
+  gulong stage_views_changed_id;
+
   MetaSurfaceActor *surface;
 
   int geometry_scale;
@@ -402,6 +404,15 @@ init_surface_actor (MetaWindowActor *self)
     meta_window_actor_assign_surface_actor (self, surface_actor);
 }
 
+static void
+on_stage_views_changed (MetaWindowActor *self)
+{
+  MetaWindowActorPrivate *priv =
+    meta_window_actor_get_instance_private (self);
+
+  meta_compositor_window_actor_stage_views_changed (priv->compositor);
+}
+
 static void
 meta_window_actor_constructed (GObject *object)
 {
@@ -412,6 +423,12 @@ meta_window_actor_constructed (GObject *object)
 
   priv->compositor = window->display->compositor;
 
+  priv->stage_views_changed_id =
+    g_signal_connect (self,
+                      "stage-views-changed",
+                      G_CALLBACK (on_stage_views_changed),
+                      NULL);
+
   /* Hang our compositor window state off the MetaWindow for fast retrieval */
   meta_window_set_compositor_private (window, object);
 
@@ -445,6 +462,8 @@ meta_window_actor_dispose (GObject *object)
 
   priv->disposed = TRUE;
 
+  g_clear_signal_handler (&priv->stage_views_changed_id, self);
+
   meta_compositor_remove_window_actor (compositor, self);
 
   g_clear_object (&priv->window);
-- 
2.37.1


From 4df8f70670b5b58497347bcdae19069809752e1a Mon Sep 17 00:00:00 2001
From: Dor Askayo <dor.askayo@gmail.com>
Date: Sat, 11 Jun 2022 12:50:02 +0300
Subject: [PATCH 16/27] window: Allow checking if a window covers a rect

This is just a small function to improve the readability of the code.
---
 src/core/window-private.h | 3 +++
 src/core/window.c         | 8 ++++++++
 2 files changed, 11 insertions(+)

diff --git a/src/core/window-private.h b/src/core/window-private.h
index 8d2d4a020..9765aa5c8 100644
--- a/src/core/window-private.h
+++ b/src/core/window-private.h
@@ -716,6 +716,9 @@ void        meta_window_get_session_geometry (MetaWindow  *window,
                                               int         *width,
                                               int         *height);
 
+gboolean    meta_window_frame_contains_rect (MetaWindow    *window,
+                                             MetaRectangle *rect);
+
 void        meta_window_update_unfocused_button_grabs (MetaWindow *window);
 
 void        meta_window_update_appears_focused (MetaWindow *window);
diff --git a/src/core/window.c b/src/core/window.c
index 95a8e33e0..af68011f1 100644
--- a/src/core/window.c
+++ b/src/core/window.c
@@ -4250,6 +4250,14 @@ meta_window_get_session_geometry (MetaWindow  *window,
     window->size_hints.height_inc;
 }
 
+gboolean
+meta_window_frame_contains_rect (MetaWindow    *window,
+                                 MetaRectangle *rect)
+{
+  return meta_rectangle_contains_rect (&window->rect,
+                                       rect);
+}
+
 /**
  * meta_window_get_buffer_rect:
  * @window: a #MetaWindow
-- 
2.37.1


From 4da9d66d43b79c5002c0fea57d32f44d96601494 Mon Sep 17 00:00:00 2001
From: Dor Askayo <dor.askayo@gmail.com>
Date: Tue, 14 Jun 2022 01:04:03 +0300
Subject: [PATCH 17/27] surface-actor: Allow checking if a surface actor covers
 a rect

---
 src/compositor/meta-surface-actor.c | 16 ++++++++++++++++
 src/compositor/meta-surface-actor.h |  3 +++
 2 files changed, 19 insertions(+)

diff --git a/src/compositor/meta-surface-actor.c b/src/compositor/meta-surface-actor.c
index 978ccf9e6..d5a32085c 100644
--- a/src/compositor/meta-surface-actor.c
+++ b/src/compositor/meta-surface-actor.c
@@ -521,6 +521,22 @@ meta_surface_actor_is_obscured_on_stage_view (MetaSurfaceActor *self,
                                                       stage_view);
 }
 
+gboolean
+meta_surface_actor_contains_rect (MetaSurfaceActor *surface_actor,
+                                  MetaRectangle    *rect)
+{
+  ClutterActor *actor = CLUTTER_ACTOR (surface_actor);
+  graphene_rect_t bounding_rect;
+  graphene_rect_t bound_rect;
+
+  clutter_actor_get_transformed_extents (actor, &bounding_rect);
+
+  _clutter_util_rect_from_rectangle (rect, &bound_rect);
+
+  return graphene_rect_contains_rect (&bounding_rect,
+                                      &bound_rect);
+}
+
 void
 meta_surface_actor_set_input_region (MetaSurfaceActor *self,
                                      cairo_region_t   *region)
diff --git a/src/compositor/meta-surface-actor.h b/src/compositor/meta-surface-actor.h
index f69cb1527..3128f513c 100644
--- a/src/compositor/meta-surface-actor.h
+++ b/src/compositor/meta-surface-actor.h
@@ -40,6 +40,9 @@ gboolean meta_surface_actor_is_obscured_on_stage_view (MetaSurfaceActor *self,
                                                        ClutterStageView *stage_view,
                                                        float            *unobscurred_fraction);
 
+gboolean meta_surface_actor_contains_rect (MetaSurfaceActor *surface_actor,
+                                           MetaRectangle    *rect);
+
 void meta_surface_actor_set_input_region (MetaSurfaceActor *self,
                                           cairo_region_t   *region);
 void meta_surface_actor_set_opaque_region (MetaSurfaceActor *self,
-- 
2.37.1


From 0f7c55147dd32f5ad2a050f51b77cbe206a8e738 Mon Sep 17 00:00:00 2001
From: Dor Askayo <dor.askayo@gmail.com>
Date: Fri, 15 Jul 2022 12:06:12 +0300
Subject: [PATCH 18/27] compositor: Introduce MetaCompositorViewNative

This class is meant to hold logic specific to the native backend
in the context of a MetaCompositorView.

Its addition requires making MetaCompositorView inheritable, and an
addition of a virtual function which allows each compositor to create
its own MetaCompositorView instance.

In the case of the MetaCompositorNative, a MetaCompositorViewNative
is created. In all other cases, a MetaCompositorView is created.
---
 src/compositor/compositor-private.h          |  3 ++
 src/compositor/compositor.c                  | 11 +++-
 src/compositor/meta-compositor-native.c      | 13 +++++
 src/compositor/meta-compositor-server.c      |  9 ++++
 src/compositor/meta-compositor-view-native.c | 53 ++++++++++++++++++++
 src/compositor/meta-compositor-view-native.h | 37 ++++++++++++++
 src/compositor/meta-compositor-view.h        |  4 +-
 src/compositor/meta-compositor-x11.c         |  9 ++++
 src/meson.build                              |  2 +
 9 files changed, 138 insertions(+), 3 deletions(-)
 create mode 100644 src/compositor/meta-compositor-view-native.c
 create mode 100644 src/compositor/meta-compositor-view-native.h

diff --git a/src/compositor/compositor-private.h b/src/compositor/compositor-private.h
index 096373fbf..4262f23cc 100644
--- a/src/compositor/compositor-private.h
+++ b/src/compositor/compositor-private.h
@@ -35,6 +35,9 @@ struct _MetaCompositorClass
                                                   int64_t         time_us);
   void (* grab_begin) (MetaCompositor *compositor);
   void (* grab_end) (MetaCompositor *compositor);
+
+  MetaCompositorView * (* create_view) (MetaCompositor   *compositor,
+                                        ClutterStageView *stage_view);
 };
 
 gboolean meta_compositor_do_manage (MetaCompositor  *compositor,
diff --git a/src/compositor/compositor.c b/src/compositor/compositor.c
index b9a8bcf7f..fe5c0f0e9 100644
--- a/src/compositor/compositor.c
+++ b/src/compositor/compositor.c
@@ -417,6 +417,14 @@ meta_compositor_redirect_x11_windows (MetaCompositor *compositor)
     redirect_windows (display->x11_display);
 }
 
+static MetaCompositorView *
+meta_compositor_create_view (MetaCompositor   *compositor,
+                             ClutterStageView *stage_view)
+{
+  return META_COMPOSITOR_GET_CLASS (compositor)->create_view (compositor,
+                                                              stage_view);
+}
+
 gboolean
 meta_compositor_do_manage (MetaCompositor  *compositor,
                            GError         **error)
@@ -1001,7 +1009,8 @@ meta_compositor_ensure_compositor_views (MetaCompositor *compositor)
       if (compositor_view)
         continue;
 
-      compositor_view = meta_compositor_view_new (stage_view);
+      compositor_view = meta_compositor_create_view (compositor,
+                                                     stage_view);
 
       g_object_set_qdata_full (G_OBJECT (stage_view),
                                quark_compositor_view,
diff --git a/src/compositor/meta-compositor-native.c b/src/compositor/meta-compositor-native.c
index c26890501..a156be7da 100644
--- a/src/compositor/meta-compositor-native.c
+++ b/src/compositor/meta-compositor-native.c
@@ -24,6 +24,7 @@
 
 #include "backends/meta-logical-monitor.h"
 #include "backends/native/meta-crtc-kms.h"
+#include "compositor/meta-compositor-view-native.h"
 #include "compositor/meta-surface-actor-wayland.h"
 
 struct _MetaCompositorNative
@@ -169,6 +170,17 @@ meta_compositor_native_before_paint (MetaCompositor     *compositor,
   parent_class->before_paint (compositor, compositor_view);
 }
 
+static MetaCompositorView *
+meta_compositor_native_create_view (MetaCompositor   *compositor,
+                                    ClutterStageView *stage_view)
+{
+  MetaCompositorViewNative *compositor_view_native;
+
+  compositor_view_native = meta_compositor_view_native_new (stage_view);
+
+  return META_COMPOSITOR_VIEW (compositor_view_native);
+}
+
 MetaCompositorNative *
 meta_compositor_native_new (MetaDisplay *display,
                             MetaBackend *backend)
@@ -203,4 +215,5 @@ meta_compositor_native_class_init (MetaCompositorNativeClass *klass)
   object_class->finalize = meta_compositor_native_finalize;
 
   compositor_class->before_paint = meta_compositor_native_before_paint;
+  compositor_class->create_view = meta_compositor_native_create_view;
 }
diff --git a/src/compositor/meta-compositor-server.c b/src/compositor/meta-compositor-server.c
index f0d469172..990aa1e77 100644
--- a/src/compositor/meta-compositor-server.c
+++ b/src/compositor/meta-compositor-server.c
@@ -22,6 +22,7 @@
 
 #include "backends/meta-dnd-private.h"
 #include "compositor/meta-compositor-server.h"
+#include "compositor/meta-compositor-view.h"
 #include "core/display-private.h"
 
 G_DEFINE_TYPE (MetaCompositorServer, meta_compositor_server, META_TYPE_COMPOSITOR)
@@ -66,6 +67,13 @@ meta_compositor_server_grab_end (MetaCompositor *compositor)
   meta_display_sync_wayland_input_focus (display);
 }
 
+static MetaCompositorView *
+meta_compositor_server_create_view (MetaCompositor   *compositor,
+                                    ClutterStageView *stage_view)
+{
+  return meta_compositor_view_new (stage_view);
+}
+
 MetaCompositorServer *
 meta_compositor_server_new (MetaDisplay *display,
                             MetaBackend *backend)
@@ -91,4 +99,5 @@ meta_compositor_server_class_init (MetaCompositorServerClass *klass)
    meta_compositor_server_monotonic_to_high_res_xserver_time;
   compositor_class->grab_begin = meta_compositor_server_grab_begin;
   compositor_class->grab_end = meta_compositor_server_grab_end;
+  compositor_class->create_view = meta_compositor_server_create_view;
 }
diff --git a/src/compositor/meta-compositor-view-native.c b/src/compositor/meta-compositor-view-native.c
new file mode 100644
index 000000000..e46b615cf
--- /dev/null
+++ b/src/compositor/meta-compositor-view-native.c
@@ -0,0 +1,53 @@
+/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
+
+/*
+ * Copyright (C) 2022 Dor Askayo
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+ * 02111-1307, USA.
+ *
+ * Written by:
+ *     Dor Askayo <dor.askayo@gmail.com>
+ */
+
+#include "compositor/meta-compositor-view-native.h"
+
+struct _MetaCompositorViewNative
+{
+  MetaCompositorView parent;
+};
+
+G_DEFINE_TYPE (MetaCompositorViewNative, meta_compositor_view_native,
+               META_TYPE_COMPOSITOR_VIEW)
+
+MetaCompositorViewNative *
+meta_compositor_view_native_new (ClutterStageView *stage_view)
+{
+  g_assert (stage_view);
+
+  return g_object_new (META_TYPE_COMPOSITOR_VIEW_NATIVE,
+                       "stage-view", stage_view,
+                       NULL);
+}
+
+static void
+meta_compositor_view_native_class_init (MetaCompositorViewNativeClass *klass)
+{
+}
+
+static void
+meta_compositor_view_native_init (MetaCompositorViewNative *view_native)
+{
+}
diff --git a/src/compositor/meta-compositor-view-native.h b/src/compositor/meta-compositor-view-native.h
new file mode 100644
index 000000000..d0971cef3
--- /dev/null
+++ b/src/compositor/meta-compositor-view-native.h
@@ -0,0 +1,37 @@
+/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
+
+/*
+ * Copyright (C) 2022 Dor Askayo
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+ * 02111-1307, USA.
+ *
+ * Written by:
+ *     Dor Askayo <dor.askayo@gmail.com>
+ */
+
+#ifndef META_COMPOSITOR_VIEW_NATIVE_H
+#define META_COMPOSITOR_VIEW_NATIVE_H
+
+#include "clutter/clutter-mutter.h"
+#include "compositor/meta-compositor-view.h"
+
+#define META_TYPE_COMPOSITOR_VIEW_NATIVE (meta_compositor_view_native_get_type ())
+G_DECLARE_FINAL_TYPE (MetaCompositorViewNative, meta_compositor_view_native,
+                      META, COMPOSITOR_VIEW_NATIVE, MetaCompositorView)
+
+MetaCompositorViewNative *meta_compositor_view_native_new (ClutterStageView *stage_view);
+
+#endif /* META_COMPOSITOR_VIEW_NATIVE_H */
diff --git a/src/compositor/meta-compositor-view.h b/src/compositor/meta-compositor-view.h
index 5588867fd..7adc41fc1 100644
--- a/src/compositor/meta-compositor-view.h
+++ b/src/compositor/meta-compositor-view.h
@@ -36,8 +36,8 @@ struct _MetaCompositorViewClass
 };
 
 #define META_TYPE_COMPOSITOR_VIEW (meta_compositor_view_get_type ())
-G_DECLARE_FINAL_TYPE (MetaCompositorView, meta_compositor_view,
-                      META, COMPOSITOR_VIEW, GObject)
+G_DECLARE_DERIVABLE_TYPE (MetaCompositorView, meta_compositor_view,
+                          META, COMPOSITOR_VIEW, GObject)
 
 MetaCompositorView *meta_compositor_view_new (ClutterStageView *stage_view);
 
diff --git a/src/compositor/meta-compositor-x11.c b/src/compositor/meta-compositor-x11.c
index 8145efb5d..e7cb39abe 100644
--- a/src/compositor/meta-compositor-x11.c
+++ b/src/compositor/meta-compositor-x11.c
@@ -28,6 +28,7 @@
 #include "backends/x11/meta-backend-x11.h"
 #include "backends/x11/meta-clutter-backend-x11.h"
 #include "backends/x11/meta-event-x11.h"
+#include "compositor/meta-compositor-view.h"
 #include "compositor/meta-sync-ring.h"
 #include "compositor/meta-window-actor-x11.h"
 #include "core/display-private.h"
@@ -458,6 +459,13 @@ meta_compositor_x11_grab_end (MetaCompositor *compositor)
   meta_backend_x11_sync_pointer (backend_x11);
 }
 
+static MetaCompositorView *
+meta_compositor_x11_create_view (MetaCompositor   *compositor,
+                                 ClutterStageView *stage_view)
+{
+  return meta_compositor_view_new (stage_view);
+}
+
 Window
 meta_compositor_x11_get_output_xwindow (MetaCompositorX11 *compositor_x11)
 {
@@ -532,4 +540,5 @@ meta_compositor_x11_class_init (MetaCompositorX11Class *klass)
    meta_compositor_x11_monotonic_to_high_res_xserver_time;
   compositor_class->grab_begin = meta_compositor_x11_grab_begin;
   compositor_class->grab_end = meta_compositor_x11_grab_end;
+  compositor_class->create_view = meta_compositor_x11_create_view;
 }
diff --git a/src/meson.build b/src/meson.build
index 40231444d..820efa0a5 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -789,6 +789,8 @@ if have_native_backend
     'backends/native/meta-xkb-utils.h',
     'compositor/meta-compositor-native.c',
     'compositor/meta-compositor-native.h',
+    'compositor/meta-compositor-view-native.c',
+    'compositor/meta-compositor-view-native.h',
   ]
 endif
 
-- 
2.37.1


From 51b412488ba7d00d15f71730d9b9cc57ef76dcb2 Mon Sep 17 00:00:00 2001
From: Dor Askayo <dor.askayo@gmail.com>
Date: Tue, 17 Mar 2020 01:44:25 +0200
Subject: [PATCH 19/27] compositor/native: Request frame sync for compatible
 windows

---
 src/compositor/meta-compositor-native.c      |  5 ++
 src/compositor/meta-compositor-view-native.c | 74 ++++++++++++++++++++
 src/compositor/meta-compositor-view-native.h |  4 ++
 3 files changed, 83 insertions(+)

diff --git a/src/compositor/meta-compositor-native.c b/src/compositor/meta-compositor-native.c
index a156be7da..63680b6d8 100644
--- a/src/compositor/meta-compositor-native.c
+++ b/src/compositor/meta-compositor-native.c
@@ -160,12 +160,17 @@ static void
 meta_compositor_native_before_paint (MetaCompositor     *compositor,
                                      MetaCompositorView *compositor_view)
 {
+  MetaCompositorViewNative *compositor_view_native =
+    META_COMPOSITOR_VIEW_NATIVE (compositor_view);
   MetaCompositorClass *parent_class;
 
 #ifdef HAVE_WAYLAND
   maybe_assign_primary_plane (compositor);
 #endif
 
+  meta_compositor_view_native_maybe_set_frame_sync (compositor_view_native,
+                                                    compositor);
+
   parent_class = META_COMPOSITOR_CLASS (meta_compositor_native_parent_class);
   parent_class->before_paint (compositor, compositor_view);
 }
diff --git a/src/compositor/meta-compositor-view-native.c b/src/compositor/meta-compositor-view-native.c
index e46b615cf..9a4558c67 100644
--- a/src/compositor/meta-compositor-view-native.c
+++ b/src/compositor/meta-compositor-view-native.c
@@ -24,6 +24,11 @@
 
 #include "compositor/meta-compositor-view-native.h"
 
+#include "backends/native/meta-renderer-view-native.h"
+#include "clutter/clutter.h"
+#include "compositor/compositor-private.h"
+#include "core/window-private.h"
+
 struct _MetaCompositorViewNative
 {
   MetaCompositorView parent;
@@ -32,6 +37,75 @@ struct _MetaCompositorViewNative
 G_DEFINE_TYPE (MetaCompositorViewNative, meta_compositor_view_native,
                META_TYPE_COMPOSITOR_VIEW)
 
+static ClutterActor *
+find_frame_sync_actor (MetaCompositorView *compositor_view,
+                       MetaCompositor     *compositor)
+{
+  MetaWindowActor *window_actor;
+  MetaWindow *window;
+  ClutterStageView *stage_view;
+  MetaRectangle view_layout;
+  MetaSurfaceActor *surface_actor;
+
+  if (meta_compositor_is_unredirect_inhibited (compositor))
+    return NULL;
+
+  window_actor =
+    meta_compositor_view_get_top_window_actor (compositor_view);
+  if (!window_actor)
+    return NULL;
+
+  if (meta_window_actor_is_frozen (window_actor))
+    return NULL;
+
+  if (meta_window_actor_effect_in_progress (window_actor))
+    return NULL;
+
+  if (clutter_actor_has_transitions (CLUTTER_ACTOR (window_actor)))
+    return NULL;
+
+  window = meta_window_actor_get_meta_window (window_actor);
+  if (!window)
+    return NULL;
+
+  stage_view = meta_compositor_view_get_stage_view (compositor_view);
+
+  clutter_stage_view_get_layout (stage_view, &view_layout);
+
+  if (!meta_window_frame_contains_rect (window, &view_layout))
+    return NULL;
+
+  surface_actor = meta_window_actor_get_scanout_candidate (window_actor);
+  if (!surface_actor)
+    return NULL;
+
+  if (!meta_surface_actor_contains_rect (surface_actor,
+                                         &view_layout))
+    return NULL;
+
+  return CLUTTER_ACTOR (surface_actor);
+}
+
+void
+meta_compositor_view_native_maybe_set_frame_sync (MetaCompositorViewNative *view_native,
+                                                  MetaCompositor           *compositor)
+{
+  MetaCompositorView *compositor_view =
+    META_COMPOSITOR_VIEW (view_native);
+  ClutterActor *frame_sync_actor;
+  MetaRendererViewNative *renderer_view_native;
+  ClutterStageView *stage_view;
+
+  frame_sync_actor = find_frame_sync_actor (compositor_view,
+                                            compositor);
+
+  stage_view = meta_compositor_view_get_stage_view (compositor_view);
+  renderer_view_native = META_RENDERER_VIEW_NATIVE (stage_view);
+
+  meta_renderer_view_native_set_frame_sync_actor (renderer_view_native,
+                                                  frame_sync_actor);
+}
+
 MetaCompositorViewNative *
 meta_compositor_view_native_new (ClutterStageView *stage_view)
 {
diff --git a/src/compositor/meta-compositor-view-native.h b/src/compositor/meta-compositor-view-native.h
index d0971cef3..301e26f7d 100644
--- a/src/compositor/meta-compositor-view-native.h
+++ b/src/compositor/meta-compositor-view-native.h
@@ -27,6 +27,7 @@
 
 #include "clutter/clutter-mutter.h"
 #include "compositor/meta-compositor-view.h"
+#include "meta/compositor.h"
 
 #define META_TYPE_COMPOSITOR_VIEW_NATIVE (meta_compositor_view_native_get_type ())
 G_DECLARE_FINAL_TYPE (MetaCompositorViewNative, meta_compositor_view_native,
@@ -34,4 +35,7 @@ G_DECLARE_FINAL_TYPE (MetaCompositorViewNative, meta_compositor_view_native,
 
 MetaCompositorViewNative *meta_compositor_view_native_new (ClutterStageView *stage_view);
 
+void meta_compositor_view_native_maybe_set_frame_sync (MetaCompositorViewNative *view_native,
+                                                       MetaCompositor           *compositor);
+
 #endif /* META_COMPOSITOR_VIEW_NATIVE_H */
-- 
2.37.1


From b0cfdeeb5dc2dc02a20b16ad08397daf80ca5181 Mon Sep 17 00:00:00 2001
From: Dor Askayo <dor.askayo@gmail.com>
Date: Tue, 17 Mar 2020 21:42:37 +0200
Subject: [PATCH 20/27] connector/kms: Detect variable refresh rate capability

The "vrr_capable" property indicates whether variable refresh rate is
supported for a connector.
---
 src/backends/native/meta-kms-connector.c | 7 +++++++
 src/backends/native/meta-kms-connector.h | 2 ++
 2 files changed, 9 insertions(+)

diff --git a/src/backends/native/meta-kms-connector.c b/src/backends/native/meta-kms-connector.c
index b7550e12e..dc906035b 100644
--- a/src/backends/native/meta-kms-connector.c
+++ b/src/backends/native/meta-kms-connector.c
@@ -298,6 +298,9 @@ state_set_properties (MetaKmsConnectorState *state,
                 META_KMS_CONNECTOR_PROP_PRIVACY_SCREEN_HW_STATE))
         set_privacy_screen (state, connector, prop,
                             drm_connector->prop_values[i]);
+      else if ((prop->flags & DRM_MODE_PROP_RANGE) &&
+               strcmp (prop->name, "vrr_capable") == 0)
+        state->vrr_capable = drm_connector->prop_values[i];
 
       drmModeFreeProperty (prop);
     }
@@ -541,6 +544,7 @@ meta_kms_connector_state_new (void)
   state = g_new0 (MetaKmsConnectorState, 1);
   state->suggested_x = -1;
   state->suggested_y = -1;
+  state->vrr_capable = FALSE;
 
   return state;
 }
@@ -636,6 +640,9 @@ meta_kms_connector_state_changes (MetaKmsConnectorState *state,
   if (!kms_modes_equal (state->modes, new_state->modes))
     return META_KMS_UPDATE_CHANGE_FULL;
 
+  if (state->vrr_capable != new_state->vrr_capable)
+    return META_KMS_UPDATE_CHANGE_FULL;
+
   if (state->privacy_screen_state != new_state->privacy_screen_state)
     return META_KMS_UPDATE_CHANGE_PRIVACY_SCREEN;
 
diff --git a/src/backends/native/meta-kms-connector.h b/src/backends/native/meta-kms-connector.h
index c2b763548..381edca97 100644
--- a/src/backends/native/meta-kms-connector.h
+++ b/src/backends/native/meta-kms-connector.h
@@ -59,6 +59,8 @@ typedef struct _MetaKmsConnectorState
   gboolean hotplug_mode_update;
 
   MetaMonitorTransform panel_orientation_transform;
+
+  gboolean vrr_capable;
 } MetaKmsConnectorState;
 
 META_EXPORT_TEST
-- 
2.37.1


From b93a1e0592c21236fcb29eb5669daf7d377f0d55 Mon Sep 17 00:00:00 2001
From: Dor Askayo <dor.askayo@gmail.com>
Date: Thu, 9 Jun 2022 23:49:23 +0300
Subject: [PATCH 21/27] kms/update: Explicitly track whether ALLOW_MODESET is
 required

This will be used by a following commit to set the
DRM_MODE_ATOMIC_ALLOW_MODESET flag in case the "VRR_ENABLED" KMS
property is modified, as required by the i915 DRM driver.
---
 src/backends/native/meta-kms-impl-device-atomic.c |  2 +-
 src/backends/native/meta-kms-update-private.h     |  3 +++
 src/backends/native/meta-kms-update.c             | 11 +++++++++++
 3 files changed, 15 insertions(+), 1 deletion(-)

diff --git a/src/backends/native/meta-kms-impl-device-atomic.c b/src/backends/native/meta-kms-impl-device-atomic.c
index 73dd8e697..f21740e29 100644
--- a/src/backends/native/meta-kms-impl-device-atomic.c
+++ b/src/backends/native/meta-kms-impl-device-atomic.c
@@ -978,7 +978,7 @@ meta_kms_impl_device_atomic_process_update (MetaKmsImplDevice *impl_device,
                         &error))
     goto err;
 
-  if (meta_kms_update_get_mode_sets (update))
+  if (meta_kms_update_needs_allow_modeset (update))
     commit_flags |= DRM_MODE_ATOMIC_ALLOW_MODESET;
   else
     commit_flags |= DRM_MODE_ATOMIC_NONBLOCK;
diff --git a/src/backends/native/meta-kms-update-private.h b/src/backends/native/meta-kms-update-private.h
index a613cbc5d..d76c2d89f 100644
--- a/src/backends/native/meta-kms-update-private.h
+++ b/src/backends/native/meta-kms-update-private.h
@@ -160,6 +160,9 @@ GList * meta_kms_update_get_connector_updates (MetaKmsUpdate *update);
 META_EXPORT_TEST
 GList * meta_kms_update_get_crtc_gammas (MetaKmsUpdate *update);
 
+META_EXPORT_TEST
+gboolean meta_kms_update_needs_allow_modeset (MetaKmsUpdate *update);
+
 MetaKmsCustomPageFlip * meta_kms_update_take_custom_page_flip_func (MetaKmsUpdate *update);
 
 void meta_kms_update_drop_plane_assignment (MetaKmsUpdate *update,
diff --git a/src/backends/native/meta-kms-update.c b/src/backends/native/meta-kms-update.c
index 53fc92eb8..ec4ff23ce 100644
--- a/src/backends/native/meta-kms-update.c
+++ b/src/backends/native/meta-kms-update.c
@@ -40,6 +40,8 @@ struct _MetaKmsUpdate
   GList *connector_updates;
   GList *crtc_gammas;
 
+  gboolean needs_allow_modeset;
+
   MetaKmsCustomPageFlip *custom_page_flip;
 
   GList *page_flip_listeners;
@@ -284,6 +286,8 @@ meta_kms_update_mode_set (MetaKmsUpdate *update,
   };
 
   update->mode_sets = g_list_prepend (update->mode_sets, mode_set);
+
+  update->needs_allow_modeset = TRUE;
 }
 
 static MetaKmsConnectorUpdate *
@@ -641,6 +645,12 @@ meta_kms_update_get_crtc_gammas (MetaKmsUpdate *update)
   return update->crtc_gammas;
 }
 
+gboolean
+meta_kms_update_needs_allow_modeset (MetaKmsUpdate *update)
+{
+  return update->needs_allow_modeset;
+}
+
 void
 meta_kms_update_lock (MetaKmsUpdate *update)
 {
@@ -692,6 +702,7 @@ meta_kms_update_new (MetaKmsDevice *device)
   update = g_new0 (MetaKmsUpdate, 1);
   update->device = device;
   update->sequence_number = sequence_number++;
+  update->needs_allow_modeset = FALSE;
 
   return update;
 }
-- 
2.37.1


From 033223554a81884f2e3328bb937965ba785a1b40 Mon Sep 17 00:00:00 2001
From: Dor Askayo <dor.askayo@gmail.com>
Date: Sat, 2 Jul 2022 17:10:36 +0300
Subject: [PATCH 22/27] kms: Allow setting the "VRR_ENABLED" property on a CRTC

Add the "VRR_ENABLED" propetry ID and a function to update its value
on a CRTC.

This requires the addition of an infrastrucure to create and process
CRTC property updates similarly to connector updates, in both the
atomic and the simple KMS backends.

As required by the i915 DRM driver, updating the "VRR_ENABLED"
property requires setting the DRM_MODE_ATOMIC_ALLOW_MODESET flag
on the atomic commit.
---
 src/backends/native/meta-kms-crtc-private.h   |  8 ++
 src/backends/native/meta-kms-crtc.c           |  5 ++
 .../native/meta-kms-impl-device-atomic.c      | 43 ++++++++++
 .../native/meta-kms-impl-device-simple.c      | 78 +++++++++++++++++++
 src/backends/native/meta-kms-update-private.h | 13 ++++
 src/backends/native/meta-kms-update.c         | 49 ++++++++++++
 src/backends/native/meta-kms-update.h         |  4 +
 7 files changed, 200 insertions(+)

diff --git a/src/backends/native/meta-kms-crtc-private.h b/src/backends/native/meta-kms-crtc-private.h
index 65bda3f10..9575b61e1 100644
--- a/src/backends/native/meta-kms-crtc-private.h
+++ b/src/backends/native/meta-kms-crtc-private.h
@@ -30,9 +30,17 @@ typedef enum _MetaKmsCrtcProp
   META_KMS_CRTC_PROP_MODE_ID = 0,
   META_KMS_CRTC_PROP_ACTIVE,
   META_KMS_CRTC_PROP_GAMMA_LUT,
+  META_KMS_CRTC_PROP_VRR_ENABLED,
   META_KMS_CRTC_N_PROPS
 } MetaKmsCrtcProp;
 
+typedef enum _MetaKmsCrtcVRRMode
+{
+  META_KMS_CRTC_VRR_MODE_DISABLED = 0,
+  META_KMS_CRTC_VRR_MODE_ENABLED,
+  META_KMS_CRTC_VRR_MODE_N_PROPS,
+} MetaKmsCrtcVRRMode;
+
 MetaKmsCrtc * meta_kms_crtc_new (MetaKmsImplDevice  *impl_device,
                                  drmModeCrtc        *drm_crtc,
                                  int                 idx,
diff --git a/src/backends/native/meta-kms-crtc.c b/src/backends/native/meta-kms-crtc.c
index e9bd9308b..b00ccca71 100644
--- a/src/backends/native/meta-kms-crtc.c
+++ b/src/backends/native/meta-kms-crtc.c
@@ -390,6 +390,11 @@ init_properties (MetaKmsCrtc       *crtc,
           .name = "GAMMA_LUT",
           .type = DRM_MODE_PROP_BLOB,
         },
+      [META_KMS_CRTC_PROP_VRR_ENABLED] =
+        {
+          .name = "VRR_ENABLED",
+          .type = DRM_MODE_PROP_RANGE,
+        },
     }
   };
 
diff --git a/src/backends/native/meta-kms-impl-device-atomic.c b/src/backends/native/meta-kms-impl-device-atomic.c
index f21740e29..0a26d2780 100644
--- a/src/backends/native/meta-kms-impl-device-atomic.c
+++ b/src/backends/native/meta-kms-impl-device-atomic.c
@@ -261,6 +261,39 @@ add_crtc_property (MetaKmsImplDevice  *impl_device,
   return TRUE;
 }
 
+static gboolean
+process_crtc_update (MetaKmsImplDevice  *impl_device,
+                     MetaKmsUpdate      *update,
+                     drmModeAtomicReq   *req,
+                     GArray             *blob_ids,
+                     gpointer            update_entry,
+                     gpointer            user_data,
+                     GError            **error)
+{
+  MetaKmsCrtcUpdate *crtc_update = update_entry;
+  MetaKmsCrtc *crtc = crtc_update->crtc;
+
+  if (crtc_update->vrr_mode.has_update)
+    {
+      meta_topic (META_DEBUG_KMS,
+                  "[atomic] Setting VRR mode to %d on CRTC %u (%s)",
+                  crtc_update->vrr_mode.is_enabled ?
+                    META_KMS_CRTC_VRR_MODE_ENABLED :
+                    META_KMS_CRTC_VRR_MODE_DISABLED,
+                  meta_kms_crtc_get_id (crtc),
+                  meta_kms_impl_device_get_path (impl_device));
+
+      if (!add_crtc_property (impl_device,
+                              crtc, req,
+                              META_KMS_CRTC_PROP_VRR_ENABLED,
+                              crtc_update->vrr_mode.is_enabled,
+                              error))
+        return FALSE;
+    }
+
+  return TRUE;
+}
+
 static gboolean
 process_mode_set (MetaKmsImplDevice  *impl_device,
                   MetaKmsUpdate      *update,
@@ -948,6 +981,16 @@ meta_kms_impl_device_atomic_process_update (MetaKmsImplDevice *impl_device,
                         &error))
     goto err;
 
+  if (!process_entries (impl_device,
+                        update,
+                        req,
+                        blob_ids,
+                        meta_kms_update_get_crtc_updates (update),
+                        NULL,
+                        process_crtc_update,
+                        &error))
+    goto err;
+
   if (!process_entries (impl_device,
                         update,
                         req,
diff --git a/src/backends/native/meta-kms-impl-device-simple.c b/src/backends/native/meta-kms-impl-device-simple.c
index ca4ffe245..89310ce0f 100644
--- a/src/backends/native/meta-kms-impl-device-simple.c
+++ b/src/backends/native/meta-kms-impl-device-simple.c
@@ -180,6 +180,47 @@ set_connector_property (MetaKmsImplDevice     *impl_device,
   return TRUE;
 }
 
+static gboolean
+set_crtc_property (MetaKmsImplDevice  *impl_device,
+                   MetaKmsCrtc        *crtc,
+                   MetaKmsCrtcProp     prop,
+                   uint64_t            value,
+                   GError            **error)
+{
+  uint32_t prop_id;
+  int fd;
+  int ret;
+
+  prop_id = meta_kms_crtc_get_prop_id (crtc, prop);
+  if (!prop_id)
+    {
+      g_set_error (error, G_IO_ERROR, G_IO_ERROR_NOT_SUPPORTED,
+                   "Property (%s) not found on CRTC %u",
+                   meta_kms_crtc_get_prop_name (crtc, prop),
+                   meta_kms_crtc_get_id (crtc));
+      return FALSE;
+    }
+
+  fd = meta_kms_impl_device_get_fd (impl_device);
+
+  ret = drmModeObjectSetProperty (fd,
+                                  meta_kms_crtc_get_id (crtc),
+                                  DRM_MODE_OBJECT_CRTC,
+                                  prop_id,
+                                  value);
+  if (ret != 0)
+    {
+      g_set_error (error, G_IO_ERROR, g_io_error_from_errno (-ret),
+                   "Failed to set CRTC %u property %u: %s",
+                   meta_kms_crtc_get_id (crtc),
+                   prop_id,
+                   g_strerror (-ret));
+      return FALSE;
+    }
+
+  return TRUE;
+}
+
 static gboolean
 process_connector_update (MetaKmsImplDevice  *impl_device,
                           MetaKmsUpdate      *update,
@@ -253,6 +294,36 @@ process_connector_update (MetaKmsImplDevice  *impl_device,
   return TRUE;
 }
 
+static gboolean
+process_crtc_update (MetaKmsImplDevice  *impl_device,
+                     MetaKmsUpdate      *update,
+                     gpointer            update_entry,
+                     GError            **error)
+{
+  MetaKmsCrtcUpdate *crtc_update = update_entry;
+  MetaKmsCrtc *crtc = crtc_update->crtc;
+
+  if (crtc_update->vrr_mode.has_update)
+    {
+      meta_topic (META_DEBUG_KMS,
+                  "[simple] Setting VRR mode to %d on CRTC %u (%s)",
+                  crtc_update->vrr_mode.is_enabled ?
+                    META_KMS_CRTC_VRR_MODE_ENABLED :
+                    META_KMS_CRTC_VRR_MODE_DISABLED,
+                  meta_kms_crtc_get_id (crtc),
+                  meta_kms_impl_device_get_path (impl_device));
+
+      if (!set_crtc_property (impl_device,
+                              crtc,
+                              META_KMS_CRTC_PROP_VRR_ENABLED,
+                              crtc_update->vrr_mode.is_enabled,
+                              error))
+        return FALSE;
+    }
+
+  return TRUE;
+}
+
 static CachedModeSet *
 cached_mode_set_new (GList                 *connectors,
                      const drmModeModeInfo *drm_mode,
@@ -1492,6 +1563,13 @@ meta_kms_impl_device_simple_process_update (MetaKmsImplDevice *impl_device,
                         &error))
     goto err;
 
+  if (!process_entries (impl_device,
+                        update,
+                        meta_kms_update_get_crtc_updates (update),
+                        process_crtc_update,
+                        &error))
+    goto err;
+
   if (!process_entries (impl_device,
                         update,
                         meta_kms_update_get_crtc_gammas (update),
diff --git a/src/backends/native/meta-kms-update-private.h b/src/backends/native/meta-kms-update-private.h
index d76c2d89f..442da6b4c 100644
--- a/src/backends/native/meta-kms-update-private.h
+++ b/src/backends/native/meta-kms-update-private.h
@@ -84,6 +84,16 @@ typedef struct _MetaKmsConnectorUpdate
   } privacy_screen;
 } MetaKmsConnectorUpdate;
 
+typedef struct _MetaKmsCrtcUpdate
+{
+  MetaKmsCrtc *crtc;
+
+  struct {
+    gboolean has_update;
+    gboolean is_enabled;
+  } vrr_mode;
+} MetaKmsCrtcUpdate;
+
 typedef struct _MetaKmsPageFlipListener
 {
   MetaKmsCrtc *crtc;
@@ -157,6 +167,9 @@ void meta_kms_update_drop_defunct_page_flip_listeners (MetaKmsUpdate *update);
 META_EXPORT_TEST
 GList * meta_kms_update_get_connector_updates (MetaKmsUpdate *update);
 
+META_EXPORT_TEST
+GList * meta_kms_update_get_crtc_updates (MetaKmsUpdate *update);
+
 META_EXPORT_TEST
 GList * meta_kms_update_get_crtc_gammas (MetaKmsUpdate *update);
 
diff --git a/src/backends/native/meta-kms-update.c b/src/backends/native/meta-kms-update.c
index ec4ff23ce..9af5bd9e5 100644
--- a/src/backends/native/meta-kms-update.c
+++ b/src/backends/native/meta-kms-update.c
@@ -38,6 +38,7 @@ struct _MetaKmsUpdate
   GList *mode_sets;
   GList *plane_assignments;
   GList *connector_updates;
+  GList *crtc_updates;
   GList *crtc_gammas;
 
   gboolean needs_allow_modeset;
@@ -408,6 +409,47 @@ meta_kms_update_set_crtc_gamma (MetaKmsUpdate  *update,
   update->crtc_gammas = g_list_prepend (update->crtc_gammas, gamma);
 }
 
+static MetaKmsCrtcUpdate *
+ensure_crtc_update (MetaKmsUpdate *update,
+                    MetaKmsCrtc   *crtc)
+{
+  GList *l;
+  MetaKmsCrtcUpdate *crtc_update;
+
+  for (l = update->crtc_updates; l; l = l->next)
+    {
+      crtc_update = l->data;
+
+      if (crtc_update->crtc == crtc)
+        return crtc_update;
+    }
+
+  crtc_update = g_new0 (MetaKmsCrtcUpdate, 1);
+  crtc_update->crtc = crtc;
+
+  update->crtc_updates = g_list_prepend (update->crtc_updates,
+                                         crtc_update);
+
+  return crtc_update;
+}
+
+void
+meta_kms_update_set_vrr_mode (MetaKmsUpdate *update,
+                              MetaKmsCrtc   *crtc,
+                              gboolean       enabled)
+{
+  MetaKmsCrtcUpdate *crtc_update;
+
+  g_assert (!meta_kms_update_is_locked (update));
+  g_assert (meta_kms_crtc_get_device (crtc) == update->device);
+
+  crtc_update = ensure_crtc_update (update, crtc);
+  crtc_update->vrr_mode.has_update = TRUE;
+  crtc_update->vrr_mode.is_enabled = enabled;
+
+  update->needs_allow_modeset = TRUE;
+}
+
 void
 meta_kms_update_add_page_flip_listener (MetaKmsUpdate                       *update,
                                         MetaKmsCrtc                         *crtc,
@@ -639,6 +681,12 @@ meta_kms_update_get_connector_updates (MetaKmsUpdate *update)
   return update->connector_updates;
 }
 
+GList *
+meta_kms_update_get_crtc_updates (MetaKmsUpdate *update)
+{
+  return update->crtc_updates;
+}
+
 GList *
 meta_kms_update_get_crtc_gammas (MetaKmsUpdate *update)
 {
@@ -719,6 +767,7 @@ meta_kms_update_free (MetaKmsUpdate *update)
   g_list_free_full (update->page_flip_listeners,
                     (GDestroyNotify) meta_kms_page_flip_listener_free);
   g_list_free_full (update->connector_updates, g_free);
+  g_list_free_full (update->crtc_updates, g_free);
   g_list_free_full (update->crtc_gammas, (GDestroyNotify) meta_kms_crtc_gamma_free);
   g_clear_pointer (&update->custom_page_flip, meta_kms_custom_page_flip_free);
 
diff --git a/src/backends/native/meta-kms-update.h b/src/backends/native/meta-kms-update.h
index f31e36aad..4e963833f 100644
--- a/src/backends/native/meta-kms-update.h
+++ b/src/backends/native/meta-kms-update.h
@@ -123,6 +123,10 @@ void meta_kms_update_set_crtc_gamma (MetaKmsUpdate  *update,
                                      const uint16_t *green,
                                      const uint16_t *blue);
 
+void meta_kms_update_set_vrr_mode (MetaKmsUpdate *update,
+                                   MetaKmsCrtc   *crtc,
+                                   gboolean       enabled);
+
 void meta_kms_plane_assignment_set_fb_damage (MetaKmsPlaneAssignment *plane_assignment,
                                               const int              *rectangles,
                                               int                     n_rectangles);
-- 
2.37.1


From 7ce39401e224743cb726418c4516cc98d41ce45d Mon Sep 17 00:00:00 2001
From: Dor Askayo <dor.askayo@gmail.com>
Date: Fri, 10 Jun 2022 19:45:47 +0300
Subject: [PATCH 23/27] output/kms: Allow setting the variable refresh rate
 mode of an output

Add a function that enables variable refresh rate on a CRTC.

Also add functions to check if an output is capable of VRR and
whether VRR is configured to be enabled on the output.

An output is considered capable of variable refresh rate if its
connector supports it.
---
 src/backends/meta-monitor-manager-private.h |  1 +
 src/backends/meta-output.c                  | 19 ++++++++++++++
 src/backends/meta-output.h                  |  7 ++++++
 src/backends/native/meta-output-kms.c       | 28 +++++++++++++++++++++
 src/backends/native/meta-output-kms.h       |  3 +++
 5 files changed, 58 insertions(+)

diff --git a/src/backends/meta-monitor-manager-private.h b/src/backends/meta-monitor-manager-private.h
index edf7e4501..19a5e1359 100644
--- a/src/backends/meta-monitor-manager-private.h
+++ b/src/backends/meta-monitor-manager-private.h
@@ -102,6 +102,7 @@ struct _MetaOutputAssignment
   gboolean     is_primary;
   gboolean     is_presentation;
   gboolean     is_underscanning;
+  gboolean     is_vrr_allowed;
 };
 
 /*
diff --git a/src/backends/meta-output.c b/src/backends/meta-output.c
index ed4807507..4dca7981f 100644
--- a/src/backends/meta-output.c
+++ b/src/backends/meta-output.c
@@ -55,6 +55,8 @@ typedef struct _MetaOutputPrivate
 
   gboolean is_underscanning;
 
+  gboolean is_vrr_allowed;
+
   int backlight;
 } MetaOutputPrivate;
 
@@ -177,6 +179,22 @@ meta_output_is_underscanning (MetaOutput *output)
   return priv->is_underscanning;
 }
 
+gboolean
+meta_output_is_vrr_capable (MetaOutput *output)
+{
+  const MetaOutputInfo *output_info = meta_output_get_info (output);
+
+  return output_info->vrr_capable;
+}
+
+gboolean
+meta_output_is_vrr_allowed (MetaOutput *output)
+{
+  MetaOutputPrivate *priv = meta_output_get_instance_private (output);
+
+  return priv->is_vrr_allowed;
+}
+
 void
 meta_output_set_backlight (MetaOutput *output,
                            int         backlight)
@@ -235,6 +253,7 @@ meta_output_assign_crtc (MetaOutput                 *output,
   priv->is_primary = output_assignment->is_primary;
   priv->is_presentation = output_assignment->is_presentation;
   priv->is_underscanning = output_assignment->is_underscanning;
+  priv->is_vrr_allowed = output_assignment->is_vrr_allowed;
 }
 
 void
diff --git a/src/backends/meta-output.h b/src/backends/meta-output.h
index 6c90d7e69..27b1e32a9 100644
--- a/src/backends/meta-output.h
+++ b/src/backends/meta-output.h
@@ -103,6 +103,8 @@ typedef struct _MetaOutputInfo
   gboolean supports_underscanning;
   gboolean supports_color_transform;
 
+  gboolean vrr_capable;
+
   /*
    * Get a new preferred mode on hotplug events, to handle dynamic guest
    * resizing.
@@ -178,6 +180,11 @@ gboolean meta_output_is_presentation (MetaOutput *output);
 META_EXPORT_TEST
 gboolean meta_output_is_underscanning (MetaOutput *output);
 
+gboolean meta_output_is_vrr_capable (MetaOutput *output);
+
+META_EXPORT_TEST
+gboolean meta_output_is_vrr_allowed (MetaOutput *output);
+
 void meta_output_set_backlight (MetaOutput *output,
                                 int         backlight);
 
diff --git a/src/backends/native/meta-output-kms.c b/src/backends/native/meta-output-kms.c
index fb658f29d..6b107dab9 100644
--- a/src/backends/native/meta-output-kms.c
+++ b/src/backends/native/meta-output-kms.c
@@ -97,6 +97,32 @@ meta_output_kms_set_underscan (MetaOutputKms *output_kms,
     }
 }
 
+void
+meta_output_kms_set_vrr_mode (MetaOutputKms *output_kms,
+                              gboolean       enabled)
+{
+  MetaOutput *output = META_OUTPUT (output_kms);
+  const MetaOutputInfo *output_info = meta_output_get_info (output);
+  MetaCrtc *crtc;
+  MetaKmsCrtc *kms_crtc;
+  MetaKmsDevice *kms_device;
+  MetaKms *kms;
+  MetaKmsUpdate *kms_update;
+
+  g_assert (output_info->vrr_capable);
+
+  crtc = meta_output_get_assigned_crtc (output);
+  kms_crtc = meta_crtc_kms_get_kms_crtc (META_CRTC_KMS (crtc));
+  kms_device = meta_kms_crtc_get_device (kms_crtc);
+  kms = meta_kms_device_get_kms (kms_device);
+
+  kms_update = meta_kms_ensure_pending_update (kms, kms_device);
+
+  meta_kms_update_set_vrr_mode (kms_update,
+                                kms_crtc,
+                                enabled);
+}
+
 static MetaPrivacyScreenState
 meta_output_kms_get_privacy_screen_state (MetaOutput *output)
 {
@@ -405,6 +431,8 @@ meta_output_kms_new (MetaGpuKms        *gpu_kms,
   output_info->supports_underscanning =
     meta_kms_connector_is_underscanning_supported (kms_connector);
 
+  output_info->vrr_capable = connector_state->vrr_capable;
+
   meta_output_info_parse_edid (output_info, connector_state->edid_data);
 
   drm_connector_type = meta_kms_connector_get_connector_type (kms_connector);
diff --git a/src/backends/native/meta-output-kms.h b/src/backends/native/meta-output-kms.h
index 52acc6032..54b1721a4 100644
--- a/src/backends/native/meta-output-kms.h
+++ b/src/backends/native/meta-output-kms.h
@@ -40,6 +40,9 @@ void meta_output_kms_set_power_save_mode (MetaOutputKms *output_kms,
 void meta_output_kms_set_underscan (MetaOutputKms *output_kms,
                                     MetaKmsUpdate *kms_update);
 
+void meta_output_kms_set_vrr_mode (MetaOutputKms *output_kms,
+                                   gboolean       enabled);
+
 gboolean meta_output_kms_can_clone (MetaOutputKms *output_kms,
                                     MetaOutputKms *other_output_kms);
 
-- 
2.37.1


From f4e4d5edc33be13762ae4f9d9e8d5d10571a84e6 Mon Sep 17 00:00:00 2001
From: Dor Askayo <dor.askayo@gmail.com>
Date: Tue, 17 Mar 2020 20:57:41 +0200
Subject: [PATCH 24/27] monitor: Allow checking the state of variable refresh
 rate

A monitor is considered to have variable refresh rate support if its
main output supports it.
---
 src/backends/meta-monitor.c | 19 +++++++++++++++++++
 src/backends/meta-monitor.h |  4 ++++
 2 files changed, 23 insertions(+)

diff --git a/src/backends/meta-monitor.c b/src/backends/meta-monitor.c
index 46cb05a66..4ccfadb7f 100644
--- a/src/backends/meta-monitor.c
+++ b/src/backends/meta-monitor.c
@@ -358,6 +358,25 @@ meta_monitor_is_underscanning (MetaMonitor *monitor)
   return meta_output_is_underscanning (output);
 }
 
+gboolean
+meta_monitor_is_vrr_capable (MetaMonitor *monitor)
+{
+  const MetaOutputInfo *output_info =
+    meta_monitor_get_main_output_info (monitor);
+
+  return output_info->vrr_capable;
+}
+
+gboolean
+meta_monitor_is_vrr_allowed (MetaMonitor *monitor)
+{
+  MetaOutput *output;
+
+  output = meta_monitor_get_main_output (monitor);
+
+  return meta_output_is_vrr_allowed (output);
+}
+
 gboolean
 meta_monitor_is_laptop_panel (MetaMonitor *monitor)
 {
diff --git a/src/backends/meta-monitor.h b/src/backends/meta-monitor.h
index 066caa7f4..aaf68ecca 100644
--- a/src/backends/meta-monitor.h
+++ b/src/backends/meta-monitor.h
@@ -118,6 +118,10 @@ gboolean meta_monitor_supports_underscanning (MetaMonitor *monitor);
 
 gboolean meta_monitor_is_underscanning (MetaMonitor *monitor);
 
+gboolean meta_monitor_is_vrr_capable (MetaMonitor *monitor);
+
+gboolean meta_monitor_is_vrr_allowed (MetaMonitor *monitor);
+
 gboolean meta_monitor_is_laptop_panel (MetaMonitor *monitor);
 
 gboolean meta_monitor_is_same_as (MetaMonitor *monitor,
-- 
2.37.1


From cc4681096b60c4c730dc24095eff150403ad1b34 Mon Sep 17 00:00:00 2001
From: Dor Askayo <dor.askayo@gmail.com>
Date: Tue, 17 Mar 2020 20:52:16 +0200
Subject: [PATCH 25/27] monitor-manager: Add variable refresh rate
 configuration

This allows enabling variable refresh rate on monitors that support it.

The configuration is persistent via monitors.xml and exposed in
DisplayConfig to be managed through DBus.
---
 .../org.gnome.Mutter.DisplayConfig.xml        |   7 +
 src/backends/meta-monitor-config-manager.c    |   9 +-
 src/backends/meta-monitor-config-manager.h    |   1 +
 src/backends/meta-monitor-config-store.c      |  30 +++
 src/backends/meta-monitor-manager.c           |  27 ++-
 src/tests/meta-monitor-test-utils.c           |   4 +
 src/tests/meta-monitor-test-utils.h           |   2 +
 src/tests/monitor-configs/vrr-allowed.xml     |  23 +++
 src/tests/monitor-store-unit-tests.c          |  51 +++++
 src/tests/monitor-unit-tests.c                | 194 ++++++++++++++++++
 10 files changed, 344 insertions(+), 4 deletions(-)
 create mode 100644 src/tests/monitor-configs/vrr-allowed.xml

diff --git a/data/dbus-interfaces/org.gnome.Mutter.DisplayConfig.xml b/data/dbus-interfaces/org.gnome.Mutter.DisplayConfig.xml
index af7cd6472..2a663b00b 100644
--- a/data/dbus-interfaces/org.gnome.Mutter.DisplayConfig.xml
+++ b/data/dbus-interfaces/org.gnome.Mutter.DisplayConfig.xml
@@ -336,6 +336,10 @@
 	    - "is-underscanning" (b): whether underscanning is enabled
 				      (absence of this means underscanning
 				      not being supported)
+	    - "is-vrr-allowed" (b): whether variable refresh rate is allowed
+	                            (absence of this means variable refresh
+	                            rate not being supported)
+
 	    - "max-screen-size" (ii): the maximum size a screen may have
 				      (absence of this means unlimited screen
 				      size)
@@ -454,6 +458,9 @@
 	        - "enable_underscanning" (b): enable monitor underscanning;
 					      may only be set when underscanning
 					      is supported (see GetCurrentState).
+	        - "allow_vrr" (b): allow variable refresh rate; may only be set
+	                           when variable refresh rate is supported (see
+	                           GetCurrentState).
 
 	@properties may effect the global monitor configuration state. Possible
 	properties are:
diff --git a/src/backends/meta-monitor-config-manager.c b/src/backends/meta-monitor-config-manager.c
index da3f1dd54..95fd3ad6c 100644
--- a/src/backends/meta-monitor-config-manager.c
+++ b/src/backends/meta-monitor-config-manager.c
@@ -286,7 +286,8 @@ assign_monitor_crtc (MetaMonitor         *monitor,
     .output = output,
     .is_primary = assign_output_as_primary,
     .is_presentation = assign_output_as_presentation,
-    .is_underscanning = data->monitor_config->enable_underscanning
+    .is_underscanning = data->monitor_config->enable_underscanning,
+    .is_vrr_allowed = data->monitor_config->allow_vrr,
   };
 
   g_ptr_array_add (data->crtc_assignments, crtc_assignment);
@@ -691,7 +692,8 @@ create_monitor_config (MetaMonitor     *monitor,
   *monitor_config = (MetaMonitorConfig) {
     .monitor_spec = meta_monitor_spec_clone (monitor_spec),
     .mode_spec = g_memdup2 (mode_spec, sizeof (MetaMonitorModeSpec)),
-    .enable_underscanning = meta_monitor_is_underscanning (monitor)
+    .enable_underscanning = meta_monitor_is_underscanning (monitor),
+    .allow_vrr = meta_monitor_is_vrr_allowed (monitor),
   };
 
   return monitor_config;
@@ -953,7 +955,8 @@ clone_monitor_config_list (GList *monitor_configs_in)
         .monitor_spec = meta_monitor_spec_clone (monitor_config_in->monitor_spec),
         .mode_spec = g_memdup2 (monitor_config_in->mode_spec,
                                 sizeof (MetaMonitorModeSpec)),
-        .enable_underscanning = monitor_config_in->enable_underscanning
+        .enable_underscanning = monitor_config_in->enable_underscanning,
+        .allow_vrr = monitor_config_in->allow_vrr,
       };
       monitor_configs_out =
         g_list_append (monitor_configs_out, monitor_config_out);
diff --git a/src/backends/meta-monitor-config-manager.h b/src/backends/meta-monitor-config-manager.h
index a789e2f08..fdf2db3a7 100644
--- a/src/backends/meta-monitor-config-manager.h
+++ b/src/backends/meta-monitor-config-manager.h
@@ -34,6 +34,7 @@ typedef struct _MetaMonitorConfig
   MetaMonitorSpec *monitor_spec;
   MetaMonitorModeSpec *mode_spec;
   gboolean enable_underscanning;
+  gboolean allow_vrr;
 } MetaMonitorConfig;
 
 typedef struct _MetaLogicalMonitorConfig
diff --git a/src/backends/meta-monitor-config-store.c b/src/backends/meta-monitor-config-store.c
index 5d48ec2ea..bb8c73c7f 100644
--- a/src/backends/meta-monitor-config-store.c
+++ b/src/backends/meta-monitor-config-store.c
@@ -167,6 +167,7 @@ typedef enum
   STATE_MONITOR_MODE_RATE,
   STATE_MONITOR_MODE_FLAG,
   STATE_MONITOR_UNDERSCANNING,
+  STATE_MONITOR_VRR_ALLOWED,
   STATE_DISABLED,
   STATE_POLICY,
   STATE_STORES,
@@ -451,6 +452,10 @@ handle_start_element (GMarkupParseContext  *context,
           {
             parser->state = STATE_MONITOR_UNDERSCANNING;
           }
+        else if (g_str_equal (element_name, "vrr-allowed"))
+          {
+            parser->state = STATE_MONITOR_VRR_ALLOWED;
+          }
         else
           {
             g_set_error (error, G_MARKUP_ERROR, G_MARKUP_ERROR_UNKNOWN_ELEMENT,
@@ -544,6 +549,13 @@ handle_start_element (GMarkupParseContext  *context,
         return;
       }
 
+    case STATE_MONITOR_VRR_ALLOWED:
+      {
+        g_set_error (error, G_MARKUP_ERROR, G_MARKUP_ERROR_UNKNOWN_ELEMENT,
+                     "Invalid element '%s' under vrr-allowed", element_name);
+        return;
+      }
+
     case STATE_DISABLED:
       {
         if (!g_str_equal (element_name, "monitorspec"))
@@ -818,6 +830,14 @@ handle_end_element (GMarkupParseContext  *context,
         return;
       }
 
+    case STATE_MONITOR_VRR_ALLOWED:
+      {
+        g_assert (g_str_equal (element_name, "vrr-allowed"));
+
+        parser->state = STATE_MONITOR;
+        return;
+      }
+
     case STATE_MONITOR:
       {
         MetaLogicalMonitorConfig *logical_monitor_config;
@@ -1301,6 +1321,14 @@ handle_text (GMarkupParseContext *context,
         return;
       }
 
+    case STATE_MONITOR_VRR_ALLOWED:
+      {
+        read_bool (text, text_len,
+                   &parser->current_monitor_config->allow_vrr,
+                   error);
+        return;
+      }
+
     case STATE_STORE:
       {
         MetaConfigStore store;
@@ -1476,6 +1504,8 @@ append_monitors (GString *buffer,
       g_string_append (buffer, "        </mode>\n");
       if (monitor_config->enable_underscanning)
         g_string_append (buffer, "        <underscanning>yes</underscanning>\n");
+      if (monitor_config->allow_vrr)
+        g_string_append (buffer, "        <vrr-allowed>yes</vrr-allowed>\n");
       g_string_append (buffer, "      </monitor>\n");
     }
 }
diff --git a/src/backends/meta-monitor-manager.c b/src/backends/meta-monitor-manager.c
index be99b4664..5185bfa92 100644
--- a/src/backends/meta-monitor-manager.c
+++ b/src/backends/meta-monitor-manager.c
@@ -1977,6 +1977,15 @@ meta_monitor_manager_handle_get_current_state (MetaDBusDisplayConfig *skeleton,
                                  g_variant_new_boolean (is_underscanning));
         }
 
+      if (meta_monitor_is_vrr_capable (monitor))
+        {
+          gboolean vrr_allowed = meta_monitor_is_vrr_allowed (monitor);
+
+          g_variant_builder_add (&monitor_properties_builder, "{sv}",
+                                 "is-vrr-allowed",
+                                 g_variant_new_boolean (vrr_allowed));
+        }
+
       is_builtin = meta_monitor_is_laptop_panel (monitor);
       g_variant_builder_add (&monitor_properties_builder, "{sv}",
                              "is-builtin",
@@ -2296,6 +2305,8 @@ create_monitor_config_from_variant (MetaMonitorManager *manager,
   g_autoptr (GVariant) properties_variant = NULL;
   gboolean enable_underscanning = FALSE;
   gboolean set_underscanning = FALSE;
+  gboolean allow_vrr = FALSE;
+  gboolean set_allow_vrr = FALSE;
 
   g_variant_get (monitor_config_variant, "(ss@a{sv})",
                  &connector,
@@ -2331,6 +2342,19 @@ create_monitor_config_from_variant (MetaMonitorManager *manager,
         }
     }
 
+  set_allow_vrr =
+    g_variant_lookup (properties_variant, "allow_vrr", "b",
+                      &allow_vrr);
+  if (set_allow_vrr)
+    {
+      if (allow_vrr && !meta_monitor_is_vrr_capable (monitor))
+        {
+          g_set_error (error, G_IO_ERROR, G_IO_ERROR_FAILED,
+                       "Variable refresh rate requested but unsupported");
+          return NULL;
+        }
+    }
+
   monitor_spec = meta_monitor_spec_clone (meta_monitor_get_spec (monitor));
 
   monitor_mode_spec = g_new0 (MetaMonitorModeSpec, 1);
@@ -2340,7 +2364,8 @@ create_monitor_config_from_variant (MetaMonitorManager *manager,
   *monitor_config = (MetaMonitorConfig) {
     .monitor_spec = monitor_spec,
     .mode_spec = monitor_mode_spec,
-    .enable_underscanning = enable_underscanning
+    .enable_underscanning = enable_underscanning,
+    .allow_vrr = allow_vrr,
   };
 
   return monitor_config;
diff --git a/src/tests/meta-monitor-test-utils.c b/src/tests/meta-monitor-test-utils.c
index aab9e1858..e74504750 100644
--- a/src/tests/meta-monitor-test-utils.c
+++ b/src/tests/meta-monitor-test-utils.c
@@ -392,6 +392,9 @@ meta_check_monitor_configuration (MetaContext           *context,
           g_assert_cmpint (expect->monitors[i].is_underscanning,
                            ==,
                            meta_output_is_underscanning (output));
+          g_assert_cmpint (expect->monitors[i].is_vrr_allowed,
+                           ==,
+                           meta_output_is_vrr_allowed (output));
         }
 
       meta_monitor_get_physical_dimensions (monitor, &width_mm, &height_mm);
@@ -778,6 +781,7 @@ meta_create_monitor_test_setup (MetaBackend          *backend,
 
           output_assignment = (MetaOutputAssignment) {
             .is_underscanning = setup->outputs[i].is_underscanning,
+            .is_vrr_allowed = setup->outputs[i].is_vrr_allowed,
           };
           meta_output_assign_crtc (output, crtc, &output_assignment);
         }
diff --git a/src/tests/meta-monitor-test-utils.h b/src/tests/meta-monitor-test-utils.h
index 988a4115e..8d3c6ceda 100644
--- a/src/tests/meta-monitor-test-utils.h
+++ b/src/tests/meta-monitor-test-utils.h
@@ -106,6 +106,7 @@ typedef struct _MonitorTestCaseOutput
   float scale;
   gboolean is_laptop_panel;
   gboolean is_underscanning;
+  gboolean is_vrr_allowed;
   const char *serial;
   MetaMonitorTransform panel_orientation_transform;
   gboolean hotplug_mode;
@@ -157,6 +158,7 @@ typedef struct _MonitorTestCaseMonitor
   int width_mm;
   int height_mm;
   gboolean is_underscanning;
+  gboolean is_vrr_allowed;
 } MonitorTestCaseMonitor;
 
 typedef struct _MonitorTestCaseLogicalMonitor
diff --git a/src/tests/monitor-configs/vrr-allowed.xml b/src/tests/monitor-configs/vrr-allowed.xml
new file mode 100644
index 000000000..36846e0b2
--- /dev/null
+++ b/src/tests/monitor-configs/vrr-allowed.xml
@@ -0,0 +1,23 @@
+<monitors version="2">
+  <configuration>
+    <logicalmonitor>
+      <x>0</x>
+      <y>0</y>
+      <primary>yes</primary>
+      <monitor>
+	<monitorspec>
+	  <connector>DP-1</connector>
+	  <vendor>MetaProduct&apos;s Inc.</vendor>
+	  <product>MetaMonitor</product>
+	  <serial>0x123456</serial>
+	</monitorspec>
+	<mode>
+	  <width>1024</width>
+	  <height>768</height>
+	  <rate>60.000495910644531</rate>
+	</mode>
+	<vrr-allowed>yes</vrr-allowed>
+      </monitor>
+    </logicalmonitor>
+  </configuration>
+</monitors>
diff --git a/src/tests/monitor-store-unit-tests.c b/src/tests/monitor-store-unit-tests.c
index 38f4bc52f..6e85c9a3d 100644
--- a/src/tests/monitor-store-unit-tests.c
+++ b/src/tests/monitor-store-unit-tests.c
@@ -48,6 +48,7 @@ typedef struct _MonitorStoreTestCaseMonitor
   const char *serial;
   MonitorStoreTestCaseMonitorMode mode;
   gboolean is_underscanning;
+  gboolean is_vrr_allowed;
 } MonitorStoreTestCaseMonitor;
 
 typedef struct _MonitorStoreTestCaseLogicalMonitor
@@ -196,6 +197,9 @@ check_monitor_store_configuration (MetaMonitorConfigStore        *config_store,
           g_assert_cmpint (monitor_config->enable_underscanning,
                            ==,
                            test_monitor->is_underscanning);
+          g_assert_cmpint (monitor_config->allow_vrr,
+                           ==,
+                           test_monitor->is_vrr_allowed);
         }
     }
 }
@@ -446,6 +450,51 @@ meta_test_monitor_store_underscanning (void)
   check_monitor_store_configurations (&expect);
 }
 
+static void
+meta_test_monitor_store_vrr_allowed (void)
+{
+  MonitorStoreTestExpect expect = {
+    .configurations = {
+      {
+        .logical_monitors = {
+          {
+            .layout = {
+              .x = 0,
+              .y = 0,
+              .width = 1024,
+              .height = 768
+            },
+            .scale = 1,
+            .is_primary = TRUE,
+            .is_presentation = FALSE,
+            .monitors = {
+              {
+                .connector = "DP-1",
+                .vendor = "MetaProduct's Inc.",
+                .product = "MetaMonitor",
+                .serial = "0x123456",
+                .is_vrr_allowed = TRUE,
+                .mode = {
+                  .width = 1024,
+                  .height = 768,
+                  .refresh_rate = 60.000495910644531
+                }
+              }
+            },
+            .n_monitors = 1,
+          },
+        },
+        .n_logical_monitors = 1
+      }
+    },
+    .n_configurations = 1
+  };
+
+  meta_set_custom_monitor_config (test_context, "vrr-allowed.xml");
+
+  check_monitor_store_configurations (&expect);
+}
+
 static void
 meta_test_monitor_store_scale (void)
 {
@@ -1013,6 +1062,8 @@ init_monitor_store_tests (void)
                    meta_test_monitor_store_primary);
   g_test_add_func ("/backends/monitor-store/underscanning",
                    meta_test_monitor_store_underscanning);
+  g_test_add_func ("/backends/monitor-store/vrr-allowed",
+                   meta_test_monitor_store_vrr_allowed);
   g_test_add_func ("/backends/monitor-store/scale",
                    meta_test_monitor_store_scale);
   g_test_add_func ("/backends/monitor-store/fractional-scale",
diff --git a/src/tests/monitor-unit-tests.c b/src/tests/monitor-unit-tests.c
index 6a807c60e..4c4cdefbb 100644
--- a/src/tests/monitor-unit-tests.c
+++ b/src/tests/monitor-unit-tests.c
@@ -3276,6 +3276,100 @@ meta_test_monitor_underscanning_config (void)
   check_monitor_test_clients_state ();
 }
 
+static void
+meta_test_monitor_vrr_allowed_config (void)
+{
+  MonitorTestCase test_case = {
+    .setup = {
+      .modes = {
+        {
+          .width = 1024,
+          .height = 768,
+          .refresh_rate = 60.0
+        }
+      },
+      .n_modes = 1,
+      .outputs = {
+        {
+          .crtc = 0,
+          .modes = { 0 },
+          .n_modes = 1,
+          .preferred_mode = 0,
+          .possible_crtcs = { 0 },
+          .n_possible_crtcs = 1,
+          .width_mm = 222,
+          .height_mm = 125,
+          .is_vrr_allowed = TRUE,
+        }
+      },
+      .n_outputs = 1,
+      .crtcs = {
+        {
+          .current_mode = 0
+        }
+      },
+      .n_crtcs = 1
+    },
+
+    .expect = {
+      .monitors = {
+        {
+          .outputs = { 0 },
+          .n_outputs = 1,
+          .modes = {
+            {
+              .width = 1024,
+              .height = 768,
+              .refresh_rate = 60.0,
+              .crtc_modes = {
+                {
+                  .output = 0,
+                  .crtc_mode = 0
+                }
+              }
+            }
+          },
+          .n_modes = 1,
+          .current_mode = 0,
+          .width_mm = 222,
+          .height_mm = 125,
+          .is_vrr_allowed = TRUE,
+        }
+      },
+      .n_monitors = 1,
+      .logical_monitors = {
+        {
+          .monitors = { 0 },
+          .n_monitors = 1,
+          .layout = { .x = 0, .y = 0, .width = 1024, .height = 768 },
+          .scale = 1
+        }
+      },
+      .n_logical_monitors = 1,
+      .primary_logical_monitor = 0,
+      .n_outputs = 1,
+      .crtcs = {
+        {
+          .current_mode = 0,
+        }
+      },
+      .n_crtcs = 1,
+      .screen_width = 1024,
+      .screen_height = 768
+    }
+  };
+  MetaMonitorTestSetup *test_setup;
+
+  test_setup = meta_create_monitor_test_setup (test_backend,
+                                               &test_case.setup,
+                                               MONITOR_TEST_FLAG_NO_STORED);
+  emulate_hotplug (test_setup);
+  META_TEST_LOG_CALL ("Checking monitor configuration",
+                      meta_check_monitor_configuration (test_context,
+                                                        &test_case.expect));
+  check_monitor_test_clients_state ();
+}
+
 static void
 meta_test_monitor_preferred_non_first_mode (void)
 {
@@ -5522,6 +5616,102 @@ meta_test_monitor_custom_underscanning_config (void)
   check_monitor_test_clients_state ();
 }
 
+static void
+meta_test_monitor_custom_vrr_allowed_config (void)
+{
+  MonitorTestCase test_case = {
+    .setup = {
+      .modes = {
+        {
+          .width = 1024,
+          .height = 768,
+          .refresh_rate = 60.000495910644531
+        }
+      },
+      .n_modes = 1,
+      .outputs = {
+        {
+          .crtc = 0,
+          .modes = { 0 },
+          .n_modes = 1,
+          .preferred_mode = 0,
+          .possible_crtcs = { 0 },
+          .n_possible_crtcs = 1,
+          .width_mm = 222,
+          .height_mm = 125
+        },
+      },
+      .n_outputs = 1,
+      .crtcs = {
+        {
+          .current_mode = 0
+        },
+      },
+      .n_crtcs = 1
+    },
+
+    .expect = {
+      .monitors = {
+        {
+          .outputs = { 0 },
+          .n_outputs = 1,
+          .modes = {
+            {
+              .width = 1024,
+              .height = 768,
+              .refresh_rate = 60.000495910644531,
+              .crtc_modes = {
+                {
+                  .output = 0,
+                  .crtc_mode = 0
+                }
+              }
+            }
+          },
+          .n_modes = 1,
+          .current_mode = 0,
+          .width_mm = 222,
+          .height_mm = 125,
+          .is_vrr_allowed = TRUE,
+        }
+      },
+      .n_monitors = 1,
+      .logical_monitors = {
+        {
+          .monitors = { 0 },
+          .n_monitors = 1,
+          .layout = { .x = 0, .y = 0, .width = 1024, .height = 768 },
+          .scale = 1
+        }
+      },
+      .n_logical_monitors = 1,
+      .primary_logical_monitor = 0,
+      .n_outputs = 1,
+      .crtcs = {
+        {
+          .current_mode = 0,
+        }
+      },
+      .n_crtcs = 1,
+      .n_tiled_monitors = 0,
+      .screen_width = 1024,
+      .screen_height = 768
+    }
+  };
+  MetaMonitorTestSetup *test_setup;
+
+  test_setup = meta_create_monitor_test_setup (test_backend,
+                                               &test_case.setup,
+                                               MONITOR_TEST_FLAG_NONE);
+  meta_set_custom_monitor_config (test_context, "vrr-allowed.xml");
+  emulate_hotplug (test_setup);
+
+  META_TEST_LOG_CALL ("Checking monitor configuration",
+                      meta_check_monitor_configuration (test_context,
+                                                        &test_case.expect));
+  check_monitor_test_clients_state ();
+}
+
 static void
 meta_test_monitor_custom_scale_config (void)
 {
@@ -9118,6 +9308,8 @@ init_monitor_tests (void)
                     meta_test_monitor_no_outputs);
   add_monitor_test ("/backends/monitor/underscanning-config",
                     meta_test_monitor_underscanning_config);
+  add_monitor_test ("/backends/monitor/vrr-allowed-config",
+                    meta_test_monitor_vrr_allowed_config);
   add_monitor_test ("/backends/monitor/preferred-non-first-mode",
                     meta_test_monitor_preferred_non_first_mode);
   add_monitor_test ("/backends/monitor/non-upright-panel",
@@ -9148,6 +9340,8 @@ init_monitor_tests (void)
                     meta_test_monitor_custom_primary_config);
   add_monitor_test ("/backends/monitor/custom/underscanning-config",
                     meta_test_monitor_custom_underscanning_config);
+  add_monitor_test ("/backends/monitor/custom/vrr-allowed-config",
+                    meta_test_monitor_custom_vrr_allowed_config);
   add_monitor_test ("/backends/monitor/custom/scale-config",
                     meta_test_monitor_custom_scale_config);
   add_monitor_test ("/backends/monitor/custom/fractional-scale-config",
-- 
2.37.1


From 7b77c0b8852f481c5b629db04a80dcb2a0595bd8 Mon Sep 17 00:00:00 2001
From: Dor Askayo <dor.askayo@gmail.com>
Date: Sat, 4 Jul 2020 01:03:19 +0300
Subject: [PATCH 26/27] renderer-view: Keep track of the associated MetaOutput

It will be used in a following commit to perform operations in the
context of a MetaOutput from the MetaRendererViewNative.
---
 src/backends/meta-renderer-view.c             | 27 +++++++++++++++++++
 src/backends/meta-renderer-view.h             |  2 ++
 src/backends/native/meta-renderer-native.c    |  1 +
 .../x11/nested/meta-renderer-x11-nested.c     |  1 +
 4 files changed, 31 insertions(+)

diff --git a/src/backends/meta-renderer-view.c b/src/backends/meta-renderer-view.c
index c16ba351c..348ce0fb8 100644
--- a/src/backends/meta-renderer-view.c
+++ b/src/backends/meta-renderer-view.c
@@ -33,6 +33,7 @@
 #include "backends/meta-renderer-view.h"
 
 #include "backends/meta-crtc.h"
+#include "backends/meta-output.h"
 #include "backends/meta-renderer.h"
 #include "clutter/clutter-mutter.h"
 #include "compositor/region-utils.h"
@@ -43,6 +44,7 @@ enum
 
   PROP_TRANSFORM,
   PROP_CRTC,
+  PROP_OUTPUT,
 
   PROP_LAST
 };
@@ -54,6 +56,7 @@ typedef struct _MetaRendererViewPrivate
   MetaMonitorTransform transform;
 
   MetaCrtc *crtc;
+  MetaOutput *output;
 } MetaRendererViewPrivate;
 
 G_DEFINE_TYPE_WITH_PRIVATE (MetaRendererView, meta_renderer_view,
@@ -77,6 +80,15 @@ meta_renderer_view_get_crtc (MetaRendererView *view)
   return priv->crtc;
 }
 
+MetaOutput *
+meta_renderer_view_get_output (MetaRendererView *view)
+{
+  MetaRendererViewPrivate *priv =
+    meta_renderer_view_get_instance_private (view);
+
+  return priv->output;
+}
+
 static void
 meta_renderer_view_get_offscreen_transformation_matrix (ClutterStageView  *view,
                                                         graphene_matrix_t *matrix)
@@ -187,6 +199,9 @@ meta_renderer_view_get_property (GObject    *object,
     case PROP_CRTC:
       g_value_set_object (value, priv->crtc);
       break;
+    case PROP_OUTPUT:
+      g_value_set_object (value, priv->output);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -211,6 +226,9 @@ meta_renderer_view_set_property (GObject      *object,
     case PROP_CRTC:
       priv->crtc = g_value_get_object (value);
       break;
+    case PROP_OUTPUT:
+      priv->output = g_value_get_object (value);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -258,5 +276,14 @@ meta_renderer_view_class_init (MetaRendererViewClass *klass)
                          G_PARAM_CONSTRUCT_ONLY |
                          G_PARAM_STATIC_STRINGS);
 
+  obj_props[PROP_OUTPUT] =
+    g_param_spec_object ("output",
+                         "MetaOutput",
+                         "MetaOutput",
+                         META_TYPE_OUTPUT,
+                         G_PARAM_READWRITE |
+                         G_PARAM_CONSTRUCT_ONLY |
+                         G_PARAM_STATIC_STRINGS);
+
   g_object_class_install_properties (object_class, PROP_LAST, obj_props);
 }
diff --git a/src/backends/meta-renderer-view.h b/src/backends/meta-renderer-view.h
index b6247f38c..355e75e96 100644
--- a/src/backends/meta-renderer-view.h
+++ b/src/backends/meta-renderer-view.h
@@ -36,4 +36,6 @@ MetaMonitorTransform meta_renderer_view_get_transform (MetaRendererView *view);
 
 MetaCrtc *meta_renderer_view_get_crtc (MetaRendererView *view);
 
+MetaOutput *meta_renderer_view_get_output (MetaRendererView *view);
+
 #endif /* META_RENDERER_VIEW_H */
diff --git a/src/backends/native/meta-renderer-native.c b/src/backends/native/meta-renderer-native.c
index a45b20806..d1b0df07c 100644
--- a/src/backends/native/meta-renderer-native.c
+++ b/src/backends/native/meta-renderer-native.c
@@ -1358,6 +1358,7 @@ meta_renderer_native_create_view (MetaRenderer       *renderer,
                               "stage", meta_backend_get_stage (backend),
                               "layout", &view_layout,
                               "crtc", crtc,
+                              "output", output,
                               "scale", scale,
                               "framebuffer", framebuffer,
                               "offscreen", offscreen,
diff --git a/src/backends/x11/nested/meta-renderer-x11-nested.c b/src/backends/x11/nested/meta-renderer-x11-nested.c
index 7c1a4facf..2f9eca5ba 100644
--- a/src/backends/x11/nested/meta-renderer-x11-nested.c
+++ b/src/backends/x11/nested/meta-renderer-x11-nested.c
@@ -223,6 +223,7 @@ meta_renderer_x11_nested_create_view (MetaRenderer       *renderer,
                        "stage", meta_backend_get_stage (backend),
                        "layout", &view_layout,
                        "crtc", crtc,
+                       "output", output,
                        "refresh-rate", mode_info->refresh_rate,
                        "framebuffer", COGL_FRAMEBUFFER (fake_onscreen),
                        "offscreen", COGL_FRAMEBUFFER (offscreen),
-- 
2.37.1


From 61871261f8168c46eba989aa18643f67912bb25d Mon Sep 17 00:00:00 2001
From: Dor Askayo <dor.askayo@gmail.com>
Date: Fri, 10 Jun 2022 21:12:49 +0300
Subject: [PATCH 27/27] renderer-view/native: Enable VRR and actor sync when
 applicable

If an actor is tracked for synchronization and VRR is configured to
be enabled for the output, set the synchronization mode to
META_FRAME_SYNC_MODE_ENABLED.

If an actor isn't tracked for synchronization or VRR is not configured
to be enabled for the output, set the synchronization mode to
META_FRAME_SYNC_MODE_DISABLED.

When the synchronization mode is set to META_FRAME_SYNC_MODE_ENABLED,
enable the VRR mode on the output, and when it's set to
META_FRAME_SYNC_MODE_DISABLED, disable it.

Synchronizing frame clock updates with actor updates on the stage view
effectively communicates the rate at which the actor updates with the
DRM driver. Combined with enabling VRR on the CRTC, it allows the DRM
driver to adjust the monitor's refresh rate to the rate at which the
actor updates.
---
 .../native/meta-renderer-view-native.c        | 27 ++++++++++++++++++-
 1 file changed, 26 insertions(+), 1 deletion(-)

diff --git a/src/backends/native/meta-renderer-view-native.c b/src/backends/native/meta-renderer-view-native.c
index c2b38e980..d3abcd021 100644
--- a/src/backends/native/meta-renderer-view-native.c
+++ b/src/backends/native/meta-renderer-view-native.c
@@ -24,6 +24,11 @@
 
 #include "backends/native/meta-renderer-view-native.h"
 
+#include "backends/meta-output.h"
+#include "backends/native/meta-crtc-kms.h"
+#include "backends/native/meta-kms.h"
+#include "backends/native/meta-kms-device.h"
+#include "backends/native/meta-output-kms.h"
 #include "clutter/clutter.h"
 
 typedef enum _MetaFrameSyncMode
@@ -112,20 +117,24 @@ meta_renderer_view_native_set_frame_sync_actor (MetaRendererViewNative *view_nat
 
 static void
 meta_renderer_view_native_set_frame_sync (MetaRendererViewNative *view_native,
+                                          MetaOutput             *output,
                                           MetaFrameSyncMode       sync_mode)
 {
   ClutterFrameClock *frame_clock =
     clutter_stage_view_get_frame_clock (CLUTTER_STAGE_VIEW (view_native));
+  MetaOutputKms *output_kms = META_OUTPUT_KMS (output);
 
   switch (sync_mode)
     {
     case META_FRAME_SYNC_MODE_ENABLED:
       clutter_frame_clock_set_mode (frame_clock,
                                     CLUTTER_FRAME_CLOCK_MODE_VARIABLE);
+      meta_output_kms_set_vrr_mode (output_kms, TRUE);
       break;
     case META_FRAME_SYNC_MODE_DISABLED:
       clutter_frame_clock_set_mode (frame_clock,
                                     CLUTTER_FRAME_CLOCK_MODE_FIXED);
+      meta_output_kms_set_vrr_mode (output_kms, FALSE);
       break;
     case META_FRAME_SYNC_MODE_INIT:
       g_assert_not_reached ();
@@ -137,12 +146,21 @@ meta_renderer_view_native_set_frame_sync (MetaRendererViewNative *view_native,
 static MetaFrameSyncMode
 meta_renderer_view_native_get_applicable_sync_mode (MetaRendererViewNative *view_native)
 {
-  return META_FRAME_SYNC_MODE_DISABLED;
+  MetaRendererView *view = META_RENDERER_VIEW (view_native);
+  MetaOutput *output = meta_renderer_view_get_output (view);
+
+  if (view_native->frame_sync_actor != NULL &&
+      meta_output_is_vrr_allowed (output))
+    return META_FRAME_SYNC_MODE_ENABLED;
+  else
+    return META_FRAME_SYNC_MODE_DISABLED;
 }
 
 void
 meta_renderer_view_native_maybe_set_frame_sync (MetaRendererViewNative *view_native)
 {
+  MetaRendererView *view;
+  MetaOutput *output;
   MetaFrameSyncMode applicable_sync_mode;
 
   if (G_LIKELY (!view_native->frame_sync_mode_update_queued))
@@ -150,12 +168,19 @@ meta_renderer_view_native_maybe_set_frame_sync (MetaRendererViewNative *view_nat
 
   view_native->frame_sync_mode_update_queued = FALSE;
 
+  view = META_RENDERER_VIEW (view_native);
+  output = meta_renderer_view_get_output (view);
+
+  if (!meta_output_is_vrr_capable (output))
+    return;
+
   applicable_sync_mode =
     meta_renderer_view_native_get_applicable_sync_mode (view_native);
 
   if (applicable_sync_mode != view_native->frame_sync_mode)
     {
       meta_renderer_view_native_set_frame_sync (view_native,
+                                                output,
                                                 applicable_sync_mode);
     }
 }
-- 
2.37.1

